{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js","./src/app/pages/devices/devices.page.ts","./src/app/pages/devices/devices.page.html","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/bottom-sheet.js","./src/app/libs/options/options.component.ts","./src/app/libs/options/options.component.html","./src/app/pages/devices/editor/editor.page.ts","./src/app/pages/devices/editor/editor.page.html","./src/app/pages/devices/devices.module.ts","./src/app/libs/confirm/confirm.module.ts","./src/app/pages/devices/editor/input-output/input-output.dialog.ts","./src/app/pages/devices/editor/input-output/input-output.dialog.html","./src/app/libs/mat-footer/mat-footer.ts","./src/app/libs/mat-footer/mat-footer.html","./src/app/pages/devices/viewer/viewer.page.ts","./src/app/pages/devices/viewer/viewer.page.html","./src/app/libs/confirm/confirm.dialog.ts","./src/app/libs/confirm/confirm.dialog.html","./src/app/libs/options/options.module.ts","./src/app/libs/confirm/confirm.service.ts","./src/app/libs/mat-footer/mat-footer.module.ts","./src/app/libs/options/options.service.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"names":[],"mappings":"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2BAA2B,6EAAc;AACpF,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,6DAAM,sCAAsC,2DAAI;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAc;AAC1C;AACA,uCAAuC,4DAAc;AACrD;AACA,uCAAuC,4DAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4DAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4CAAO;AACrD,2CAA2C,4CAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAK;AACnC;AACA,2CAA2C,gEAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,UAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAQ;AACjC;AACA,yBAAyB,6CAA6C;AACtE,SAAS;AACT,oCAAoC,mEAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yDAAW;AACzD,qDAAqD,kEAAc,gCAAgC,oCAAoC;AACvI;AACA;AACA;AACA,yEAAyE,mEAAe;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAgE;AAC7E,aAAa,wDAAwD;AACrE,aAAa;AACb;AACA;AACA,gDAAgD,gEAAc;AAC9D;AACA,yBAAyB,gEAAc;AACvC,2BAA2B,kCAAkC,+CAAE;AAC/D,aAAa;AACb;AACA,eAAe,sDAAQ,SAAS,oDAAoD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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,+DAA+D,8DAAM,4BAA4B,6DAAM;AACpH;AACA,8CAA8C,6EAAc;AAC5D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8DAAM,wCAAwC,4DAAI;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4DAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yDAAW;AACzD,+CAA+C,kEAAc;AAC7D;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,mEAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAQ;AACjC;AACA,yBAAyB,kDAAkD;AAC3E,SAAS;AACT,oCAAoC,mEAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kEAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,uDAAuD;AACpE,aAAa;AACb;AACA;AACA,gDAAgD,gEAAc;AAC9D;AACA,yBAAyB,gEAAc;AACvC,2BAA2B,kCAAkC,+CAAE;AAC/D,aAAa;AACb;AACA,eAAe,sDAAQ,SAAS,oDAAoD;AACpF;AACA;AACA,0DAA0D,kCAAkC,sDAAe,CAAC,4DAAc,GAAG,sDAAe,CAAC,sDAAe,GAAG,sDAAe,sBAAsB,sDAAe,uCAAuC;AAC1P,uBAAuB,wEAAkB,EAAE,6CAA6C,2BAA2B,8DAAQ,CAAC,4DAAO,GAAG,8DAAQ,CAAC,sDAAQ,GAAG,8DAAQ,sBAAsB,8DAAQ,uCAAuC,EAAE,2DAA2D;AACpS;AACA,KAAK,OAAO,4DAAO,EAAE;AACrB,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK,qCAAqC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AAClF,KAAK,2CAA2C,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,6CAA6C;AAC9H;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,gBAAgB,mCAAmC;AACnD,KAAK,gBAAgB,UAAU,OAAO,4DAAc,EAAE,GAAG,OAAO,sDAAe,EAAE,GAAG;AACpF,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEqM;;AAErM,wC;;;;;;;;;;;;AChmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0F;;;;;;;;;;ICKtF,mFAAoQ;IAA7C,+XAA4C;IAC/P,yEAA0D;IAE1D,4EAAW;IACP,qEAAI;IACA,uDACJ;IAAA,4DAAK;IACT,4DAAY;IAChB,4DAAgB;;;IARqF,qFAA8B;IAA8C,iGAAqC;IAA7I,mFAA2B;IACzE,0DAAuB;IAAvB,mFAAuB;IAItC,0DACJ;IADI,2FACJ;;ADDL,MAAM,YAAY;IAExB,YAAoB,KAAsC,EAAyC,MAAW;QAA1F,UAAK,GAAL,KAAK,CAAiC;QAAyC,WAAM,GAAN,MAAM,CAAK;QAEvG,UAAK,GAAU,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QACjC,YAAO,GAAU,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAHsE,CAAC;IAK5G,MAAM,CAAC,MAAW;QACxB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAED,QAAQ;QACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBAChD,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;aACxB;iBAAM;gBACN,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;aACvB;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;;wEAnBW,YAAY,qNAE4C,oFAAqB;4FAF7E,YAAY;QCVzB,qEAAI;QACA,uDACJ;QAAA,4DAAK;QAEL,2EAAU;QACN,4HAQgB;QACpB,4DAAW;;QAbP,0DACJ;QADI,sFACJ;QAGiE,0DAAU;QAAV,gFAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJd;AAGO;AAEpE,qBAAqB;AACkD;AAEvE,qBAAqB;AAC2B;AACF;AACa;;;;;;;;;;;;;;;;;;;;;;;;ICJ3D,kFAA0E;;;IAsB1D,4EAA+B;IAC3B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,8FACJ;;;IAUA,4EAAmC;IAC/B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,kGACJ;;;IAYA,4EAA6B;IACzB,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAUA,4EAA+B;IAC3B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,8FACJ;;;IAmBA,4EAAkC;IAC9B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,iGACJ;;;IAcA,4EAAiC;IAC7B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,gGACJ;;;IAmBA,4EAAkC;IAC9B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,iGACJ;;;IAcA,4EAAkC;IAC9B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,iGACJ;;;IAYA,4EAAiC;IAC7B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,gGACJ;;;IAUA,4EAAkC;IAC9B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,kGACJ;;;IAWJ,4EAAsC;IAClC,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,sGACJ;;;IAQA,yEAAsD;IAClD,wEACJ;IAAA,4DAAK;;;IACL,yEAAuC;IACnC,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,mGACJ;;;IAGJ,oEAAkE;;;;IAClE,yEAA2E;IAAvB,wVAAsB;IAAC,4DAAK;;AD9KjF,MAAM,iBAAiB;IAE1B,YAAoB,KAAqB,EAAU,MAAiB,EAAU,KAAmB,EAAU,KAAqB,EAAU,MAAc,EAAU,OAAuB,EAAU,SAA2B;QAA1M,UAAK,GAAL,KAAK,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAW;QAAU,UAAK,GAAL,KAAK,CAAc;QAAU,UAAK,GAAL,KAAK,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAgB;QAAU,cAAS,GAAT,SAAS,CAAkB;QAEvN,SAAI,GAAW,KAAK,CAAC;QACrB,SAAI,GAAc,IAAI,wDAAS,CAAC;YACnC,EAAE,EAAE,IAAI,0DAAW,CAAC,SAAS,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrD,IAAI,EAAE,IAAI,0DAAW,CAAC,CAAC,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,IAAI,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAClD,MAAM,EAAE,IAAI,0DAAW,CAAC,CAAC,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpE,MAAM,EAAE,IAAI,0DAAW,CAAC,GAAG,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACxE,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrD,OAAO,EAAE,IAAI,0DAAW,CAAC,KAAK,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtD,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACnD,OAAO,EAAE,IAAI,0DAAW,CAAC,KAAK,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtD,QAAQ,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1G,WAAW,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAC5D,CAAC,CAAC;QACI,UAAK,GAAoC,IAAI,0EAAkB,EAAe,CAAC;QAC/E,WAAM,GAAQ;YACjB,EAAE,EAAE,EAAE;YACN,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,EAAE;YACV,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,EAAE;SAClB,CAAC;QACK,YAAO,GAAa,CAAC,aAAa,CAAC,CAAC;QACpC,YAAO,GAAY,KAAK,CAAC;QAExB,cAAS,GAAQ,EAAE,CAAC;IAjCsM,CAAC;IAmCrN,GAAG;;YACb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;gBACpC,MAAM,EAAE;oBACJ,IAAI;oBACJ,IAAI;oBACJ,MAAM;oBACN,MAAM;oBACN,QAAQ;oBACR,QAAQ;oBACR,SAAS;oBACT,SAAS;oBACT,SAAS;oBACT,SAAS;oBACT,UAAU;oBACV,aAAa;iBAChB;gBACD,QAAQ,EAAE,IAAI,CAAC,QAAQ;aAC1B,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACb,MAAM,MAAM,GAAG,IAAI,6DAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAC3C,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAc,EAAE,EAAE,CAAC,IAAI,wEAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC7C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACrD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACrD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACzD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aAClE;iBAAM;gBACH,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;aACtC;YAAA,CAAC;YAEF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACzB,CAAC;KAAA;IAEY,MAAM;;YACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACrB,IAAI,IAAI,IAAI,MAAM,EAAE;gBAChB,IAAI,GAAG,KAAK,CAAC;gBACb,OAAO,IAAI,CAAC,QAAQ,CAAC;aACxB;YAAA,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAO,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,CAAC;gBAC/C,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;gBACnB,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACtB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;gBAC1B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;gBAC1B,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;gBAC9B,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;gBAC9B,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO;gBAChC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO;gBAChC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO;gBAChC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO;gBAChC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;gBAClC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW;aAC3C,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;aACtC;iBAAM;gBACH,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC7C;YAAA,CAAC;YAEF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACzB,CAAC;KAAA;IAEY,OAAO,CAAC,EAAe;;YAChC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACZ,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,EAAE,CAAC,WAAW;gBACrB,OAAO,EAAE;oBACL;wBACI,IAAI,EAAE,cAAc;wBACpB,KAAK,EAAE,MAAM;wBACb,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC;wBACtC,QAAQ,EAAE,EAAE;qBACf;oBACD;wBACI,IAAI,EAAE,MAAM;wBACZ,KAAK,EAAE,QAAQ;wBACf,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;wBACxC,QAAQ,EAAE,EAAE;qBACf;oBACD;wBACI,IAAI,EAAE,QAAQ;wBACd,KAAK,EAAE,QAAQ;wBACf,MAAM,EAAE,IAAI;wBACZ,OAAO,EAAE,GAAG,EAAE;4BACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCAC7C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,OAAO,EAAE;oCAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oCAC7B,MAAM;iCACT;gCAAA,CAAC;6BACL;4BAAA,CAAC;4BACF,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,wEAAW,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnE,CAAC;wBACD,QAAQ,EAAE,EAAE;qBACf;iBACJ;aACJ,CAAC,CAAC;QACP,CAAC;KAAA;IAEY,MAAM,CAAC,IAAY,EAAE,EAAgB;;YAC9C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mFAAiB,EAAE;gBACrD,IAAI,EAAE;oBACF,EAAE,EAAE,IAAI,wEAAW,CAAC,EAAE,CAAC;oBACvB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;iBAC7B;gBACD,UAAU,EAAE,mBAAmB;aAClC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAM,MAAM,EAAC,EAAE,CAAC;gBACjD,IAAI,MAAM,EAAE;oBACR,QAAQ,IAAI,EAAE;wBACV,KAAK,CAAC,KAAK,CAAC,CAAC;wBACb,KAAK,CAAC,MAAM,CAAC;4BACT,MAAM,CAAC,OAAO,GAAG,mEAAQ,EAAE,CAAC;4BAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4BAC7B,MAAM;wBACV,KAAK,CAAC,QAAQ,CAAC;4BACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;gCAC3B,IAAI,CAAC,CAAC,OAAO,KAAI,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,OAAO,GAAE;oCAC1B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;wCAC1B,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oCACzB,CAAC,CAAC,CAAC;iCACN;gCAAA,CAAC;4BACN,CAAC,CAAC,CAAC;4BACH,MAAM;qBACb;oBAAA,CAAC;oBACF,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAc,EAAE,EAAE,CAAC,IAAI,wEAAW,CAAC,CAAC,CAAC,CAAC,CAAC;iBACjF;gBAAA,CAAC;YACN,CAAC,EAAC,CAAC;QACP,CAAC;KAAA;IAED,QAAQ;QACJ,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,EAAE;YACpB,IAAI,CAAC,GAAG,EAAE,CAAC;SACd;QAAA,CAAC;IACN,CAAC;IAED,WAAW;;QACP,UAAI,CAAC,SAAS,CAAC,IAAI,0CAAE,WAAW,GAAG;IACvC,CAAC;;kFApMQ,iBAAiB;iGAAjB,iBAAiB;;QC1B9B,8EAAa;QACT,6EAAmC;QAEnC,+EAA0B;QACtB,2EACJ;QAAA,4DAAY;QAChB,4DAAc;QAEd,uIAA0E;QAE1E,8EAAa;QACT,0EAA4E;QAAnD,kLAAyC,YAAQ,IAAC;QACvE,0EAAS;QACL,oFAAqC;QACjC,4EAAW;QACP,kEACJ;QAAA,4DAAY;QAEZ,iFAA+D;QAC3D,iFAA2B;QACvB,oEACJ;QAAA,4DAAa;QACb,iFAA6B;QACzB,sEACJ;QAAA,4DAAa;QACb,iFAAkD;QAC9C,2FACJ;QAAA,4DAAa;QACjB,4DAAa;QAEb,2HAEY;QAChB,4DAAiB;QAEjB,qFAAqC;QACjC,6EAAW;QACP,uEACJ;QAAA,4DAAY;QAEZ,uEAAsH;QAEtH,2HAEY;QAChB,4DAAiB;QACrB,4DAAU;QAEV,2EAAS;QACL,qFAAqC;QACjC,6EAAW;QACP,gEACJ;QAAA,4DAAY;QAEZ,wEAA0E;QAE1E,2HAEY;QAChB,4DAAiB;QAEjB,qFAAqC;QACjC,6EAAW;QACP,kEACJ;QAAA,4DAAY;QAEZ,wEAAyF;QAEzF,2HAEY;QAChB,4DAAiB;QACrB,4DAAU;QAEV,2EAAS;QACL,qFAAqC;QACjC,6EAAW;QACP,qEACJ;QAAA,4DAAY;QAEZ,kFAAqE;QACjE,kFAA2B;QACvB,qEACJ;QAAA,4DAAa;QACb,kFAA4B;QACxB,sEACJ;QAAA,4DAAa;QACjB,4DAAa;QAEb,2HAEY;QAChB,4DAAiB;QAEjB,qFAAqC;QACjC,6EAAW;QACP,8EACJ;QAAA,4DAAY;QAEZ,wEAAyG;QAEzG,4EAAgB;QACZ,wDACJ;QAAA,4DAAO;QAEP,2HAEY;QAChB,4DAAiB;QACrB,4DAAU;QAEV,2EAAS;QACL,qFAAqC;QACjC,6EAAW;QACP,qEACJ;QAAA,4DAAY;QAEZ,kFAAqE;QACjE,kFAA2B;QACvB,qEACJ;QAAA,4DAAa;QACb,kFAA4B;QACxB,sEACJ;QAAA,4DAAa;QACjB,4DAAa;QAEb,2HAEY;QAChB,4DAAiB;QAEjB,qFAAqC;QACjC,6EAAW;QACP,8EACJ;QAAA,4DAAY;QAEZ,wEAAiG;QAEjG,4EAAgB;QACZ,wDACJ;QAAA,4DAAO;QAEP,2HAEY;QAChB,4DAAiB;QACrB,4DAAU;QAEV,2EAAS;QACL,qFAAqC;QACjC,6EAAW;QACP,qEACJ;QAAA,4DAAY;QAEZ,wEAA8F;QAE9F,2HAEY;QAChB,4DAAiB;QAEjB,qFAAqC;QACjC,6EAAW;QACP,qEACJ;QAAA,4DAAY;QAEZ,wEAAqF;QAErF,2HAEY;QAChB,4DAAiB;QACrB,4DAAU;QAEV,qFAAqC;QACjC,6EAAW;QACP,yEACJ;QAAA,4DAAY;QAEZ,wEAA6F;QAE7F,2HAEY;QAChB,4DAAiB;QAEjB,6EAA8D;QAClE,4DAAO;QAEP,6EAA8C;QAC1C,6EAAyC;QACrC,8GAEK;QACL,8GAEK;QACT,qEAAe;QAEf,8GAAkE;QAClE,8GAAgF;QACpF,4DAAQ;QAER,8EAA4E;QAAxB,0IAAS,WAAO,KAAK,CAAC,IAAC;QACvE,2EAAmC;QACvC,4DAAS;QACb,4DAAc;QAEd,8EAAY;QACR,8EAA+E;QAAzB,yRAAS,YAAc,IAAC;QAC1E,oEACJ;QAAA,4DAAS;QACb,4DAAa;;QA5M2B,0DAAa;QAAb,6EAAa;QAG3C,0DAAkB;QAAlB,+EAAkB;QAmBA,2DAAiB;QAAjB,iFAAiB;QAYjB,0DAAqB;QAArB,qFAAqB;QAcrB,0DAAe;QAAf,+EAAe;QAYf,0DAAiB;QAAjB,iFAAiB;QAab,0DAAc;QAAd,uEAAc;QAGd,0DAAe;QAAf,wEAAe;QAKnB,0DAAoB;QAApB,oFAAoB;QAa5B,0DACJ;QADI,sHACJ;QAEY,0DAAmB;QAAnB,mFAAmB;QAaf,0DAAc;QAAd,uEAAc;QAGd,0DAAe;QAAf,wEAAe;QAKnB,0DAAoB;QAApB,oFAAoB;QAa5B,0DACJ;QADI,uHACJ;QAEY,0DAAoB;QAApB,oFAAoB;QAcpB,0DAAmB;QAAnB,mFAAmB;QAYnB,0DAAoB;QAApB,oFAAoB;QAaxB,0DAAwB;QAAxB,wFAAwB;QAQ3B,0DAAoB;QAApB,iFAAoB;QAUb,0DAA0B;QAA1B,wFAA0B;QACb,0DAAiB;QAAjB,yFAAiB;;;;;;;;;;;;;;ACxM1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAmB;AAC+B;AACL;AACY;AAEzD,qBAAqB;AACyD;AAI/B;AACqB;AACA;AACb;AACA;AACA;AACE;AACA;AACE;AACiB;AACjB;AACA;AACE;AACkB;AAClB;AACG;AACE;AACwB;AACA;AACnC;AACe;AACJ;;;AAElE,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACzB;IACD;QACI,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,qEAAiB;KAC/B;IACD;QACI,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,8DAAU;KACxB;CACJ,CAAC;AAoCK,MAAM,iBAAiB;;kFAAjB,iBAAiB;iGAAjB,iBAAiB;qGAjCjB;YACL,2DAAW;YACX,4DAAY;YACZ,oEAAa;YACb,iFAAa;YACb,oEAAa;YACb,oEAAa;YACb,iFAAa;YACb,uEAAc;YACd,uEAAc;YACd,yEAAe;YACf,0FAAe;YACf,yEAAe;YACf,yEAAe;YACf,2EAAgB;YAChB,2EAAgB;YAChB,6FAAgB;YAChB,8EAAiB;YACjB,gFAAkB;YAClB,wGAAmB;YACnB,wGAAmB;YACnB,mEAAmB;YACnB,oFAAoB;YACpB,6DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAChC;oIASQ,iBAAiB,mBAPtB,8DAAU;QACV,yDAAW;QACX,0FAAiB;QACjB,qEAAiB,aA5BjB,2DAAW;QACX,4DAAY;QACZ,oEAAa;QACb,iFAAa;QACb,oEAAa;QACb,oEAAa;QACb,iFAAa;QACb,uEAAc;QACd,uEAAc;QACd,yEAAe;QACf,0FAAe;QACf,yEAAe;QACf,yEAAe;QACf,2EAAgB;QAChB,2EAAgB;QAChB,6FAAgB;QAChB,8EAAiB;QACjB,gFAAkB;QAClB,wGAAmB;QACnB,wGAAmB;QACnB,mEAAmB;QACnB,oFAAoB;;;;;;;;;;;;;ACrE5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACQ;AACI;AACA;AACA;AACE;AACK;AACA;AAElE,qBAAqB;AAC8B;AAEnD,uBAAuB;AAC0B;;AAsB1C,MAAM,aAAa;;0EAAb,aAAa;6FAAb,aAAa;kGARd;QACV,+DAAc;KACd,YAbQ;YACR,0DAAW;YACX,4DAAY;YACZ,oEAAa;YACb,wEAAe;YACf,wEAAe;YACf,wEAAe;YACf,0EAAgB;YAChB,+EAAkB;YAClB,kEAAmB;SACnB;oIASW,aAAa,mBAJxB,6DAAa,aAdb,0DAAW;QACX,4DAAY;QACZ,oEAAa;QACb,wEAAe;QACf,wEAAe;QACf,wEAAe;QACf,0EAAgB;QAChB,+EAAkB;QAClB,kEAAmB;;;;;;;;;;;;;AC3BrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyE;AACL;;;;;;;;;;;;;;;;ICkBxD,4EAAmC;IAC/B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,mGACJ;;;IATJ,oFAA8D;IAC1D,4EAAW;IACP,qEACJ;IAAA,4DAAY;IAEZ,uEAAsH;IAEtH,0IAEY;IAChB,4DAAiB;;;IAL2E,0DAA6B;IAA7B,6FAA6B;IAEzG,0DAAqB;IAArB,wFAAqB;;;IAa7B,4EAAmC;IAC/B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,kGACJ;;;IASI,iFAAmD;IAC/C,uDACJ;IAAA,4DAAa;;;IAFwB,0EAAa;IAC9C,0DACJ;IADI,mFACJ;;;IAGJ,4EAA8B;IAC1B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,6FACJ;;;IAYA,4EAA8B;IAC1B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,8FACJ;;;IAVR,0EAAgD;IAC5C,oFAAqC;IACjC,4EAAW;IACP,gEACJ;IAAA,4DAAY;IAEZ,uEAAgJ;IAEhJ,oIAEY;IAChB,4DAAiB;IACrB,4DAAU;;;IAN4E,0DAAiE;IAAjE,wIAAiE;IAEnI,0DAAgB;IAAhB,mFAAgB;;;IAqB5B,4EAAmC;IAC/B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,mGACJ;;;IAiBA,4EAAoC;IAChC,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,oGACJ;;;IApCR,0EAAyD;IACrD,oFAAqC;IACjC,4EAAW;IACP,qEACJ;IAAA,4DAAY;IAEZ,iFAAmH;IAC/G,iFAA2B;IACvB,oEACJ;IAAA,4DAAa;IACb,iFAA4B;IACxB,qEACJ;IAAA,4DAAa;IACjB,4DAAa;IAEb,oIAEY;IAChB,4DAAiB;IAEjB,qFAAqC;IACjC,6EAAW;IACP,uEACJ;IAAA,4DAAY;IAEZ,kFAAqH;IACjH,kFAA2B;IACvB,qEACJ;IAAA,4DAAa;IACb,kFAA4B;IACxB,sEACJ;IAAA,4DAAa;IACjB,4DAAa;IAEb,sIAEY;IAChB,4DAAiB;IACrB,4DAAU;;;IAhC4D,0DAAoD;IAApD,oHAAoD;IAClG,0DAAc;IAAd,uEAAc;IAGd,0DAAe;IAAf,wEAAe;IAKnB,0DAAqB;IAArB,wFAAqB;IAU+B,0DAAoD;IAApD,oHAAoD;IACpG,0DAAc;IAAd,uEAAc;IAGd,0DAAe;IAAf,wEAAe;IAKnB,0DAAsB;IAAtB,yFAAsB;;;IAatC,4EAAgC;IAC5B,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,gGACJ;;;IATJ,oFAAqF;IACjF,4EAAW;IACP,mEACJ;IAAA,4DAAY;IAEZ,uEAA6H;IAE7H,2IAEY;IAChB,4DAAiB;;;IAL2D,0DAAoD;IAApD,oHAAoD;IAEhH,0DAAkB;IAAlB,qFAAkB;;;IAW1B,iFAAqD;IACjD,uDACJ;IAAA,4DAAa;;;IAF4B,wEAAW;IAChD,0DACJ;IADI,iFACJ;;;IAGJ,4EAAoC;IAChC,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,oGACJ;;;IAbJ,oFAAqF;IACjF,4EAAW;IACP,sEACJ;IAAA,4DAAY;IAEZ,iFAAqH;IACjH,6IAEa;IACjB,4DAAa;IAEb,2IAEY;IAChB,4DAAiB;;;IATmD,0DAAoD;IAApD,oHAAoD;IACtF,0DAAa;IAAb,sFAAa;IAK/B,0DAAsB;IAAtB,yFAAsB;;;IAYlC,4EAAsC;IAClC,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,qGACJ;;ADpIL,MAAM,iBAAiB;IAE1B,YAAoB,MAAuC,EAAmC,MAAW,EAAU,SAA2B;QAA1H,WAAM,GAAN,MAAM,CAAiC;QAAmC,WAAM,GAAN,MAAM,CAAK;QAAU,cAAS,GAAT,SAAS,CAAkB;QAEvI,SAAI,GAAa;YACpB,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,OAAO;YACP,OAAO;YACP,OAAO;YACP,OAAO;YACP,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,MAAM;YACN,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,QAAQ;YACR,YAAY;SACf,CAAC;QACK,SAAI,GAAW,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAChC,SAAI,GAAc,IAAI,wDAAS,CAAC;YACnC,GAAG,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;YACxC,GAAG,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;YACxC,KAAK,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC;YAC5C,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACvE,QAAQ,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC;YAClD,QAAQ,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC;YAClD,QAAQ,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC;YAClD,SAAS,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC;YACpD,SAAS,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC;YACpD,WAAW,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAClF,CAAC,CAAC;QACI,WAAM,GAAQ;YACjB,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,EAAE;YACP,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;YACZ,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,EAAE;YACb,WAAW,EAAE,EAAE;SAClB,CAAC;QACK,cAAS,GAAa;YACzB,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;SACR,CAAC;QACK,eAAU,GAAa;YAC1B,MAAM;YACN,MAAM;YACN,KAAK;YACL,MAAM;YACN,MAAM;YACN,OAAO;YACP,MAAM;YACN,OAAO;YACP,MAAM;YACN,OAAO;YACP,OAAO;YACP,MAAM;YACN,cAAc;YACd,iBAAiB;YACjB,QAAQ;YACR,MAAM;YACN,OAAO;YACP,YAAY;YACZ,OAAO;YACP,SAAS;YACT,OAAO;YACP,OAAO;YACP,OAAO;YACP,SAAS;YACT,cAAc;YACd,MAAM;YACN,OAAO;YACP,SAAS;YACT,SAAS;YACT,QAAQ;SACX,CAAC;QACM,cAAS,GAAQ,EAAE,CAAC;IArGsH,CAAC;IAuG5I,KAAK;QACR,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAEM,MAAM;QACT,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAE7B,QAAQ,IAAI,CAAC,IAAI,EAAE;YACf,KAAK,CAAC,QAAQ,CAAC;gBACX,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC;gBACrD,MAAM;YACV,KAAK,CAAC,UAAU,CAAC;gBACb,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,sBAAsB,EAAE,CAAC;gBAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC;gBACrD,MAAM;YACV,KAAK,CAAC,+BAA+B,CAAC;gBAClC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC;gBAClD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC;gBACrD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAC;gBACtD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAC;gBACtD,MAAM;SACb;QAAA,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YACrE,IAAI,GAAG,IAAI,YAAY,EAAE;gBACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAClF;iBAAM;gBACH,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;aAC9C;YAAA,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,sBAAsB,EAAE,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW;;QACP,UAAI,CAAC,SAAS,CAAC,GAAG,0CAAE,WAAW,GAAG;QAClC,UAAI,CAAC,SAAS,CAAC,IAAI,0CAAE,WAAW,GAAG;IACvC,CAAC;;kFA5JQ,iBAAiB,0MAE2C,wEAAe;iGAF3E,iBAAiB;;QCb9B,8EAAa;QACT,+EAA0B;QACtB,gFACJ;QAAA,4DAAY;QAEZ,4EAA0C;QAAlB,yIAAS,WAAO,IAAC;QACrC,yEAAqC;QACzC,4DAAS;QACb,4DAAc;QAEd,8EAAa;QACT,0EAAgE;QAAvC,kKAA6B,YAAQ,IAAC;QAC3D,mIAUiB;QAEjB,0EAAS;QACL,oFAAqC;QACjC,6EAAW;QACP,uEACJ;QAAA,4DAAY;QAEZ,uEAAgH;QAEhH,2HAEY;QAChB,4DAAiB;QAEjB,qFAAqC;QACjC,6EAAW;QACP,iEACJ;QAAA,4DAAY;QAEZ,iFAAoF;QAChF,6HAEa;QACjB,4DAAa;QAEb,2HAEY;QAChB,4DAAiB;QACrB,4DAAU;QAEV,uHAYU;QAEV,wHAsCU;QAEV,qIAUiB;QAEjB,qIAciB;QAEjB,qFAAqC;QACjC,6EAAW;QACP,yEACJ;QAAA,4DAAY;QAEZ,wEAA6F;QAE7F,2HAEY;QAChB,4DAAiB;QAEjB,6EAA8D;QAClE,4DAAO;QACX,4DAAc;QAEd,8EAAY;QACR,8EAA+E;QAAzB,wRAAS,WAAc,IAAC;QAC1E,oEACJ;QAAA,4DAAS;QACb,4DAAa;;QAjJH,0DAAkB;QAAlB,+EAAkB;QACkB,0DAAsB;QAAtB,sFAAsB;QAkB4B,0DAA+B;QAA/B,4FAA+B;QAEnG,0DAAqB;QAArB,qFAAqB;QAUmB,0DAA+B;QAA/B,4FAA+B;QACnD,0DAAO;QAAP,6EAAO;QAK3B,0DAAgB;QAAhB,gFAAgB;QAM1B,0DAAoC;QAApC,oGAAoC;QAcpC,0DAA6C;QAA7C,6GAA6C;QAwCjB,0DAA6C;QAA7C,6GAA6C;QAY7C,0DAA6C;QAA7C,6GAA6C;QAuBnE,0DAAwB;QAAxB,wFAAwB;;;;;;;;;;;;;;;;;;;ACtIzC,MAAM,SAAS;IAErB,gBAAgB,CAAC;;kEAFL,SAAS;yFAAT,SAAS;;QCTtB,6DAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGzB,qBAAqB;AAC2B;AACA;AAQhD,yBAAyB;AACkC;;;;;;;;;;;;;ICInD,yEAAoD;IAChD,yEAA+B;IAC3B,uDACJ;IAAA,4DAAM;IAEN,yEAAyB;IACrB,uDACJ;IAAA,4DAAM;IACV,4DAAM;;;IANE,0DACJ;IADI,gGACJ;IAGI,0DACJ;IADI,0FACJ;;ADHL,MAAM,UAAU;IAEnB,YAAoB,OAAuB,EAAU,MAAqB,EAAU,KAAqB,EAAU,MAAc,EAAU,KAAmB;QAA1I,YAAO,GAAP,OAAO,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAe;QAAU,UAAK,GAAL,KAAK,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAc;QAEvJ,WAAM,GAAW,IAAI,6DAAM,EAAE,CAAC;QAC9B,YAAO,GAAY,KAAK,CAAC;QAExB,cAAS,GAAQ,EAAE,CAAC;IALsI,CAAC;IAOrJ,GAAG;;YACb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;gBACpC,MAAM,EAAE;oBACJ,IAAI;oBACJ,IAAI;oBACJ,MAAM;oBACN,MAAM;oBACN,QAAQ;oBACR,QAAQ;oBACR,SAAS;oBACT,SAAS;oBACT,SAAS;oBACT,UAAU;oBACV,aAAa;oBACb,aAAa;iBAChB;gBACD,QAAQ,EAAE,IAAI,CAAC,QAAQ;aAC1B,CAAC,CAAC;YACH,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACb,IAAI,CAAC,MAAM,GAAG,IAAI,6DAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aAC7C;iBAAM;gBACH,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACzB,CAAC;KAAA;IAED,QAAQ;QACJ,CAAC,GAAS,EAAE,CAAC;YACT,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC/C,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAEhC,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;YAEjB,MAAM,MAAM,GAAG,IAAI,6DAAM,CAAC,wEAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAEzD,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAU,EAAE,EAAE;gBACvD,QAAQ,KAAK,CAAC,OAAO,EAAE;oBACnB,KAAK,CAAC,MAAM,CAAC;wBACT,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE;4BACxC,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC;4BACxC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;4BAC/B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAe,EAAE,EAAE;gCACnC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAwC,EAAE,EAAE;oCAC/D,IAAI,EAAE,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;wCAC5B,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;qCACzB;oCAAA,CAAC;gCACN,CAAC,CAAC,CAAC;4BACP,CAAC,CAAC,CAAC;yBACN;wBAAA,CAAC;wBACF,MAAM;oBACV,KAAK,CAAC,SAAS,CAAC;wBACZ,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE;4BACxC,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE;gCACtB,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;gCAClC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;6BACnC;iCAAM;gCACH,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;6BAClC;4BAAA,CAAC;yBACL;wBAAA,CAAC;wBACF,MAAM;iBACb;gBAAA,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAW,EAAE,EAAE;gBAC5D,IAAI,MAAM,IAAI,cAAc,EAAE;oBAC1B,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;iBAC9C;gBAAA,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC,EAAC,EAAE,CAAC;IACT,CAAC;IAED,WAAW;;QACP,UAAI,CAAC,SAAS,CAAC,IAAI,0CAAE,WAAW,GAAG;QACnC,UAAI,CAAC,SAAS,CAAC,MAAM,0CAAE,WAAW,GAAG;IACzC,CAAC;;oEAtFQ,UAAU;0FAAV,UAAU;QCtBvB,8EAAa;QACT,6EAAmC;QAEnC,+EAA0B;QACtB,uDACJ;QAAA,4DAAY;QAEZ,0EAA8B;QAC1B,uDACJ;;QAAA,4DAAO;QAEP,2EAAmD;QAC/C,iEACJ;QAAA,4DAAW;QACf,4DAAc;QAEd,8EAAa;QACT,0EAA8B;QAC1B,wGAQM;QACV,4DAAM;QACV,4DAAc;;QAxBN,0DACJ;QADI,kGACJ;QAGI,0DACJ;QADI,4OACJ;QAEU,0DAAwC;QAAxC,gGAAwC;QAOR,0DAAY;QAAZ,kFAAY;;;;;;;;;;;;;;ACjB1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyE;;;;;AAUlE,MAAM,aAAa;IAEzB,YAAoB,MAAmC,EAAmC,MAAqB;QAA3F,WAAM,GAAN,MAAM,CAA6B;QAAmC,WAAM,GAAN,MAAM,CAAe;QAExG,YAAO,GAAW,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAFsE,CAAC;IAI7G,MAAM;QACZ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAEM,OAAO;QACb,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;;0EAZW,aAAa,0MAEwC,wEAAe;6FAFpE,aAAa;QCX1B,iFAA6B;QACzB,uDACJ;QAAA,4DAAc;QAEd,4EAA0E;QAApB,qIAAS,aAAS,IAAC;QACrE,6EACJ;QAAA,4DAAS;QAET,4EAAsE;QAAnB,qIAAS,YAAQ,IAAC;QACjE,yEACJ;QAAA,4DAAS;;QATL,0DACJ;QADI,wFACJ;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACQ;AACA;AACE;AACS;AACI;AAEtE,sBAAsB;AAC6B;AAEnD,wBAAwB;AAC2B;;AAmB5C,MAAM,aAAa;;0EAAb,aAAa;4FAAb,aAAa;iGARd;QACV,+DAAc;KACd,YAVQ;YACR,4DAAY;YACZ,oEAAa;YACb,oEAAa;YACb,sEAAe;YACf,+EAAkB;YAClB,mFAAoB;SACpB;mIASW,aAAa,mBAJxB,+DAAY,aAXZ,4DAAY;QACZ,oEAAa;QACb,oEAAa;QACb,sEAAe;QACf,+EAAkB;QAClB,mFAAoB;;;;;;;;;;;;;;;;;;;;ACpB2B;;;AAM1C,MAAM,cAAc;IAE1B,YAAoB,MAAiB;QAAjB,WAAM,GAAN,MAAM,CAAW;IAAI,CAAC;IAE7B,IAAI,CAAC,MAAqB;;YACtC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6DAAa,EAAE;gBACpD,IAAI,EAAE,MAAM;gBACZ,UAAU,EAAE,gBAAgB;aAC5B,CAAC,CAAC;YAEH,MAAM,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gBACvC,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;oBAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;iBACjB;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;KAAA;;4EAfW,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAHd,MAAM;;;;;;;;;;;;;ACHnB;AAAA;AAAA;AAAA;AAAA;AAA+C;AAE/C,wBAAwB;AACiB;;AAclC,MAAM,eAAe;;8EAAf,eAAe;8FAAf,eAAe;kGAXlB;YACR,4DAAY;SACZ;mIASW,eAAe,mBAJ1B,qDAAS,aANT,4DAAY,aAGZ,qDAAS;;;;;;;;;;;;;ACXX;AAAA;AAAA;AAAA;AAAA;AAAmD;;;AAO5C,MAAM,cAAc;IAE1B,YAAoB,KAAqB;QAArB,UAAK,GAAL,KAAK,CAAgB;IAAI,CAAC;IAEvC,IAAI,CAAC,MAAc;QACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,+DAAY,EAAE;YAC7B,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,eAAe;SAC3B,CAAC,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACtC,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;gBAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;aACjB;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;;4EAbW,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAHd,MAAM;;;;;;;;;;;;;ACLnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiL;AACtF;AAC9B;AACV;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACwC;AACI;;AAE5C;AACA;AACA;AACA,4BAA4B,cAAc,kBAAkB,eAAe,cAAc,kBAAkB,gBAAgB,2BAA2B,MAAM,OAAO,QAAQ,SAAS,kBAAkB,aAAa,mBAAmB,uBAAuB,YAAY,UAAU,SAAS,0EAA0E,aAAa,mBAAmB,YAAY,WAAW,2BAA2B,gBAAgB,eAAe,kBAAkB,OAAO,QAAQ,8EAA8E,SAAS,UAAU,mBAAmB,kBAAkB,gGAAgG,YAAY,mCAAmC,aAAa,sBAAsB,UAAU,sBAAsB,gBAAgB,qCAAqC,SAAS,UAAU,mBAAmB,kBAAkB,yCAAyC,aAAa,qCAAqC,MAAM,qCAAqC,SAAS,gCAAgC,mBAAmB,0CAA0C,gBAAgB,kBAAkB,sCAAsC,aAAa;AAC9vC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAc;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,wBAAwB,4BAA4B,kFAAoB,SAAS;AACjF;AACA,mBAAmB,sBAAsB;AACzC,wBAAwB,4BAA4B,kFAAoB,SAAS;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,oBAAoB;AAC5K,mBAAmB,+DAAwB,EAAE,4JAA4J;AACzM,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,yCAAyC,wJAAwJ;AACnN,QAAQ,6DAAsB;AAC9B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,uDAAuD;AAC9D;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,0BAA0B;AAChG;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,eAAe,OAAO,mDAAK,EAAE;AAC7B;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,+BAA+B,+DAAiB;AAChD,iCAAiC,qEAAuB;AACxD,yCAAyC,cAAc,kBAAkB,eAAe,cAAc,kBAAkB,gBAAgB,2BAA2B,MAAM,OAAO,QAAQ,SAAS,kBAAkB,aAAa,mBAAmB,uBAAuB,YAAY,UAAU,SAAS,0EAA0E,aAAa,mBAAmB,YAAY,WAAW,2BAA2B,gBAAgB,eAAe,kBAAkB,OAAO,QAAQ,8EAA8E,SAAS,UAAU,mBAAmB,kBAAkB,gGAAgG,YAAY,mCAAmC,aAAa,sBAAsB,UAAU,sBAAsB,gBAAgB,qCAAqC,SAAS,UAAU,mBAAmB,kBAAkB,yCAAyC,aAAa,qCAAqC,MAAM,qCAAqC,SAAS,gCAAgC,mBAAmB,0CAA0C,gBAAgB,kBAAkB,sCAAsC,aAAa;AAC3wC,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG;AAC5D,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAQ;AAChB;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,wDAAiB,GAAG;AAC5I,uBAAuB,+DAAwB,EAAE,qKAAqK;AACtN,QAAQ,4DAAqB,WAAW,8DAAO;AAC/C,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,yIAAyI;AAChJ,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA,cAAc,OAAO,6DAAe,SAAS,8DAAO,GAAG,oBAAoB,IAAI;AAC/E;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,+BAA+B,+DAAiB;AAChD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,EAAE,EAAE,GAAG;AAChE,kBAAkB,6DAAe;AACjC,mBAAmB,8DAAO,GAAG,oBAAoB;AACjD,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,+CAA+C;AAC/H,iCAAiC,+DAAwB,EAAE,0IAA0I;AACrM,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY,OAAO,iBAAiB,KAAK,eAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,KAAK,iBAAiB,MAAM,OAAO;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,KAAK,KAAK,OAAO,SAAS,KAAK,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB,MAAM,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc,KAAK,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAsC,KAAK,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sCAAsC,KAAK,qBAAqB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+EAA+E,MAAM;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA,qDAAqD,MAAM;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA,4CAA4C,kFAAoB;AAChE;AACA;AACA,sBAAsB,qBAAqB;AAC3C,2BAA2B,mBAAmB,2BAA2B,EAAE;AAC3E;AACA,qBAAqB,wBAAwB;AAC7C;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"pages-devices-devices-module.js","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n        // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n        this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = this._getActiveElement();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = this._getActiveElement();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = this._getActiveElement();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Gets the currently-focused element on the page. */\n    _getActiveElement() {\n        var _a;\n        // If the `activeElement` is inside a shadow root, `document.activeElement` will\n        // point to the shadow root so we have to descend into it ourselves.\n        const activeElement = this._document.activeElement;\n        return ((_a = activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot) === null || _a === void 0 ? void 0 : _a.activeElement) || activeElement;\n    }\n}\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) { return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\n_MatDialogContainerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatDialogContainerBase, viewQuery: function _MatDialogContainerBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatDialogContainerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\n_MatDialogContainerBase.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return ɵMatDialogContainer_BaseFactory(t || MatDialogContainer); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\nconst ɵMatDialogContainer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._getAfterAllClosed() :\n            this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) { return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken)); };\n_MatDialogBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatDialogBase });\n_MatDialogBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: undefined },\n    { type: undefined },\n    { type: OverlayContainer },\n    { type: undefined },\n    { type: Type },\n    { type: Type },\n    { type: InjectionToken }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: undefined }, { type: undefined }, { type: ɵngcc3.OverlayContainer }, { type: undefined }, { type: ɵngcc0.Type }, { type: ɵngcc0.Type }, { type: ɵngcc0.InjectionToken }]; }, null); })();\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map","import { Device } from 'src/app/classes/device';\nimport { Router } from '@angular/router';\nimport { Socket } from 'src/app/classes/socket';\nimport { MatSort } from '@angular/material/sort';\nimport { environment } from 'src/environments/environment';\nimport { InputOutput } from 'src/app/classes/input-output';\nimport { ToastService } from 'src/app/services/toast/toast.service';\nimport { ConfirmService } from 'src/app/libs/confirm/confirm.service';\nimport { DevicesService } from 'src/app/services/devices/devices.service';\nimport { OptionsService } from 'src/app/libs/options/options.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { OnInit, Component, OnDestroy, ViewChild } from '@angular/core';\n\n@Component({\n    selector: 'devices-page',\n    styleUrls: ['./devices.page.scss'],\n    templateUrl: './devices.page.html'\n})\n\nexport class DevicesPage implements OnInit, OnDestroy {\n\n    @ViewChild(MatSort, { static: true }) private sort: MatSort = new MatSort();\n\n    constructor(private toast: ToastService, private sheet: OptionsService, private router: Router, private confirm: ConfirmService, private service: DevicesService) { }\n\n    public table: MatTableDataSource<Device> = new MatTableDataSource<Device>();\n    public columns?: string[] = ['description', 'type', 'lastConnection', 'isConnected', 'publish', 'enabled'];\n    public loading?: boolean;\n    private observers: any = {};\n\n    private async list() {\n        this.loading = true;\n\n        const response = await this.service.list({});\n\n        if (response.ok) {\n            this.table.data = response.result.map((o: any) => new Device(o));\n        } else {\n            this.table.data = [];\n        };\n\n        this.loading = false;\n    }\n\n    public async options(device: Device) {\n        this.sheet.show({\n            role: 0,\n            title: device.description,\n            options: [\n                {\n                    icon: 'visibility',\n                    title: 'View',\n                    handler: () => {\n                        this.router.navigate(['/devices', 'viewer'], {\n                            queryParams: {\n                                deviceId: device.deviceId\n                            }\n                        });\n                    },\n                    disabled: []\n                },\n                {\n                    icon: 'content_copy',\n                    title: 'Copy',\n                    handler: () => {\n                        this.router.navigate(['/devices', 'editor'], {\n                            queryParams: {\n                                mode: 'copy',\n                                deviceId: device.deviceId\n                            }\n                        });\n                    },\n                    disabled: []\n                },\n                {\n                    icon: 'edit',\n                    title: 'Edit',\n                    handler: () => {\n                        this.router.navigate(['/devices', 'editor'], {\n                            queryParams: {\n                                mode: 'update',\n                                deviceId: device.deviceId\n                            }\n                        });\n                    },\n                    disabled: []\n                },\n                {\n                    icon: 'delete',\n                    title: 'Delete',\n                    danger: true,\n                    handler: () => {\n                        this.confirm.show({\n                            message: 'Are you sure you want to delete ' + device.description + '?',\n                            handler: async () => {\n                                this.loading = true;\n\n                                const response = await this.service.delete({\n                                    deviceId: device.deviceId\n                                });\n\n                                if (response.ok) {\n                                    for (let i = 0; i < this.table.data.length; i++) {\n                                        if (this.table.data[i].deviceId == device.deviceId) {\n                                            this.table.data.splice(i, 1);\n                                            break;\n                                        };\n                                    };\n                                    this.table.data = this.table.data.map(o => new Device(o));\n                                } else {\n                                    this.toast.error(response.result.message);\n                                };\n\n                                this.loading = false;\n                            }\n                        });\n                    },\n                    disabled: []\n                }\n            ]\n        });\n    }\n\n    ngOnInit(): void {\n        this.table.sort = this.sort;\n\n        (async () => {\n            await this.list();\n\n            const socket = new Socket(environment.socket, 'devices');\n\n            this.observers.data = socket.data.subscribe((event: any) => {\n                switch (event.process) {\n                    case ('data'):\n                        for (let i = 0; i < this.table.data.length; i++) {\n                            if (this.table.data[i].deviceId == event.result.deviceId) {\n                                this.table.data[i].lastConnection = new Date();\n                                this.table.data[i].isConnected = true;\n                                this.table.data[i].io.map((io: InputOutput) => {\n                                    event.result.data.map((data: { value: number; inputId: string }) => {\n                                        if (io.inputId == data.inputId) {\n                                            io.value = data.value;\n                                        };\n                                    });\n                                });\n                            };\n                        };\n                        this.table.data = this.table.data.map((o: Device) => new Device(o));\n                        break;\n                    case ('timeout'):\n                        for (let i = 0; i < this.table.data.length; i++) {\n                            if (this.table.data[i].deviceId == event.result.deviceId) {\n                                if (event.result.timeout) {\n                                    delete this.table.data[i].lastConnection;\n                                    this.table.data[i].isConnected = false;\n                                } else {\n                                    this.table.data[i].isConnected = true;\n                                };\n                            };\n                        };\n                        this.table.data = this.table.data.map((o: Device) => new Device(o));\n                        break;\n                };\n            });\n\n            this.observers.status = socket.status.subscribe((status: any) => {\n                if (status == 'disconnected') {\n                    setTimeout(() => socket.reconnect(), 5000);\n                };\n            });\n        })();\n    }\n\n    ngOnDestroy(): void {\n        this.observers.data?.unsubscribe();\n        this.observers.status?.unsubscribe();\n    }\n\n}\n","<mat-toolbar>\n    <mat-menu-button></mat-menu-button>\n    \n    <mat-label class=\"spacer\">\n        Devices\n    </mat-label>\n\n    <button mat-icon-button routerLink=\"editor\" [queryParams]=\"{mode: 'add'}\">\n        <mat-icon svgIcon=\"add\"></mat-icon>\n    </button>\n</mat-toolbar>\n\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\"></mat-progress-bar>\n\n<mat-content>\n    <table mat-table [dataSource]=\"table\" matSort>\n        <ng-container matColumnDef=\"description\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>\n                Description\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                {{ element.description }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"type\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>\n                Type\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                {{ element.type == 'modbus' ? 'Modbus' : '' }}\n                {{ element.type == 'external' ? 'External' : '' }}\n                {{ element.type == 'programmable-logic-controller' ? 'Programmable Logic Controller' : '' }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"lastConnection\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>\n                Last Connection\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                {{ element.lastConnection ? (element.lastConnection | date : 'yyyy/MM/dd HH:mm:ss') : 'not connected!' }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"isConnected\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon svgIcon=\"wifi\" [class.isConnected]=\"element.isConnected\"></mat-icon>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"publish\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon svgIcon=\"file_upload\" [class.enabled]=\"element.publish\" [matTooltip]=\"element.publish ? 'Publishing is enabled' : 'Publishing is disabled'\"></mat-icon>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"enabled\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon svgIcon=\"file_download\" [class.enabled]=\"element.enabled\" [matTooltip]=\"element.enabled ? 'Device is enabled' : 'Device is disabled'\"></mat-icon>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"columns; sticky: true;\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: columns;\" (click)=\"options(row)\"></tr>\n    </table>\n</mat-content>","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport { InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, NgModule, TemplateRef, Injector, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, SkipSelf } from '@angular/core';\nimport { AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, merge, of } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { filter, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/layout';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\n\nfunction MatBottomSheetContainer_ng_template_0_Template(rf, ctx) { }\nconst MAT_BOTTOM_SHEET_DATA = new InjectionToken('MatBottomSheetData');\n/**\n * Configuration used when opening a bottom sheet.\n */\nclass MatBottomSheetConfig {\n    constructor() {\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** Whether the bottom sheet has a backdrop. */\n        this.hasBackdrop = true;\n        /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n        this.disableClose = false;\n        /** Aria label to assign to the bottom sheet element. */\n        this.ariaLabel = null;\n        /**\n         * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // Note that this is disabled by default, because while the a11y recommendations are to focus\n        // the first focusable element, doing so prevents screen readers from reading out the\n        // rest of the bottom sheet content.\n        /** Whether the bottom sheet should focus the first focusable element on open. */\n        this.autoFocus = false;\n        /**\n         * Whether the bottom sheet should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Animations used by the Material bottom sheet. */\nconst matBottomSheetAnimations = {\n    /** Animation that shows and hides a bottom sheet. */\n    bottomSheetState: trigger('state', [\n        state('void, hidden', style({ transform: 'translateY(100%)' })),\n        state('visible', style({ transform: 'translateY(0%)' })),\n        transition('visible => void, visible => hidden', animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n        transition('void => visible', animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\nclass MatBottomSheetContainer extends BasePortalOutlet {\n    constructor(_elementRef, _changeDetectorRef, _focusTrapFactory, breakpointObserver, document, \n    /** The bottom sheet configuration. */\n    bottomSheetConfig) {\n        super();\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this.bottomSheetConfig = bottomSheetConfig;\n        /** The state of the bottom sheet animations. */\n        this._animationState = 'void';\n        /** Emits whenever the state of the animation changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the bottom sheet was opened. */\n        this._elementFocusedBeforeOpened = null;\n        /**\n         * Attaches a DOM portal to the bottom sheet container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._validatePortalAttached();\n            this._setPanelClass();\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._document = document;\n        this._breakpointSubscription = breakpointObserver\n            .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n            .subscribe(() => {\n            this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(Breakpoints.Medium));\n            this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(Breakpoints.Large));\n            this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(Breakpoints.XLarge));\n        });\n    }\n    /** Attach a component portal as content to this bottom sheet container. */\n    attachComponentPortal(portal) {\n        this._validatePortalAttached();\n        this._setPanelClass();\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this bottom sheet container. */\n    attachTemplatePortal(portal) {\n        this._validatePortalAttached();\n        this._setPanelClass();\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Begin animation of bottom sheet entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /** Begin animation of the bottom sheet exiting from view. */\n    exit() {\n        if (!this._destroyed) {\n            this._animationState = 'hidden';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    ngOnDestroy() {\n        this._breakpointSubscription.unsubscribe();\n        this._destroyed = true;\n    }\n    _onAnimationDone(event) {\n        if (event.toState === 'hidden') {\n            this._restoreFocus();\n        }\n        else if (event.toState === 'visible') {\n            this._trapFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    _toggleClass(cssClass, add) {\n        const classList = this._elementRef.nativeElement.classList;\n        add ? classList.add(cssClass) : classList.remove(cssClass);\n    }\n    _validatePortalAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach bottom sheet content after content is already attached');\n        }\n    }\n    _setPanelClass() {\n        const element = this._elementRef.nativeElement;\n        const panelClass = this.bottomSheetConfig.panelClass;\n        if (Array.isArray(panelClass)) {\n            // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n            panelClass.forEach(cssClass => element.classList.add(cssClass));\n        }\n        else if (panelClass) {\n            element.classList.add(panelClass);\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(element);\n        }\n        if (this.bottomSheetConfig.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else {\n            const activeElement = this._getActiveElement();\n            // Otherwise ensure that focus is on the container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the bottom sheet already, because it's possible that the\n            // consumer turned off `autoFocus` in order to move focus themselves.\n            if (activeElement !== element && !element.contains(activeElement)) {\n                element.focus();\n            }\n        }\n    }\n    /** Restores focus to the element that was focused before the bottom sheet was opened. */\n    _restoreFocus() {\n        const toFocus = this._elementFocusedBeforeOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            const activeElement = this._getActiveElement();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the bottom sheet or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                toFocus.focus();\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n    _savePreviouslyFocusedElement() {\n        this._elementFocusedBeforeOpened = this._getActiveElement();\n        // The `focus` method isn't available during server-side rendering.\n        if (this._elementRef.nativeElement.focus) {\n            Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n        }\n    }\n    /** Gets the currently-focused element on the page. */\n    _getActiveElement() {\n        var _a;\n        // If the `activeElement` is inside a shadow root, `document.activeElement` will\n        // point to the shadow root so we have to descend into it ourselves.\n        const activeElement = this._document.activeElement;\n        return ((_a = activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot) === null || _a === void 0 ? void 0 : _a.activeElement) || activeElement;\n    }\n}\nMatBottomSheetContainer.ɵfac = function MatBottomSheetContainer_Factory(t) { return new (t || MatBottomSheetContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BreakpointObserver), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatBottomSheetConfig)); };\nMatBottomSheetContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatBottomSheetContainer, selectors: [[\"mat-bottom-sheet-container\"]], viewQuery: function MatBottomSheetContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"mat-bottom-sheet-container\"], hostVars: 2, hostBindings: function MatBottomSheetContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.start\", function MatBottomSheetContainer_animation_state_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@state.done\", function MatBottomSheetContainer_animation_state_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.bottomSheetConfig == null ? null : ctx.bottomSheetConfig.ariaLabel);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatBottomSheetContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatBottomSheetContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}.cdk-high-contrast-active .mat-bottom-sheet-container{outline:1px solid}.mat-bottom-sheet-container-xlarge,.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\\n\"], encapsulation: 2, data: { animation: [matBottomSheetAnimations.bottomSheetState] } });\nMatBottomSheetContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusTrapFactory },\n    { type: BreakpointObserver },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatBottomSheetConfig }\n];\nMatBottomSheetContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBottomSheetContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-bottom-sheet-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\r\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than where\n                // they were stamped out. This means that we can't have the bottom sheet container be OnPush,\n                // because it might cause the sheets that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matBottomSheetAnimations.bottomSheetState],\n                host: {\n                    'class': 'mat-bottom-sheet-container',\n                    'tabindex': '-1',\n                    'role': 'dialog',\n                    'aria-modal': 'true',\n                    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n                    '[@state]': '_animationState',\n                    '(@state.start)': '_onAnimationStart($event)',\n                    '(@state.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}.cdk-high-contrast-active .mat-bottom-sheet-container{outline:1px solid}.mat-bottom-sheet-container-xlarge,.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc2.BreakpointObserver }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatBottomSheetConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBottomSheetModule {\n}\nMatBottomSheetModule.ɵfac = function MatBottomSheetModule_Factory(t) { return new (t || MatBottomSheetModule)(); };\nMatBottomSheetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBottomSheetModule });\nMatBottomSheetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            MatCommonModule,\n            PortalModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBottomSheetModule, { declarations: function () { return [MatBottomSheetContainer]; }, imports: function () { return [OverlayModule,\n        MatCommonModule,\n        PortalModule]; }, exports: function () { return [MatBottomSheetContainer, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBottomSheetModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatCommonModule,\n                    PortalModule,\n                ],\n                exports: [MatBottomSheetContainer, MatCommonModule],\n                declarations: [MatBottomSheetContainer],\n                entryComponents: [MatBottomSheetContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nclass MatBottomSheetRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the bottom sheet has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n        this._afterOpened = new Subject();\n        this.containerInstance = containerInstance;\n        this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n        // Emit when opening animation completes\n        containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'visible'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        containerInstance._animationStateChanged\n            .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            _overlayRef.dispose();\n        });\n        _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n            this._afterDismissed.next(this._result);\n            this._afterDismissed.complete();\n        });\n        merge(_overlayRef.backdropClick(), _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))).subscribe(event => {\n            if (!this.disableClose &&\n                (event.type !== 'keydown' || !hasModifierKey(event))) {\n                event.preventDefault();\n                this.dismiss();\n            }\n        });\n    }\n    /**\n     * Dismisses the bottom sheet.\n     * @param result Data to be passed back to the bottom sheet opener.\n     */\n    dismiss(result) {\n        if (!this._afterDismissed.closed) {\n            // Transition the backdrop in parallel to the bottom sheet.\n            this.containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1)).subscribe(event => {\n                // The logic that disposes of the overlay depends on the exit animation completing, however\n                // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n                // timeout which will clean everything up if the animation hasn't fired within the specified\n                // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n                // vast majority of cases the timeout will have been cleared before it has fired.\n                this._closeFallbackTimeout = setTimeout(() => {\n                    this._overlayRef.dispose();\n                }, event.totalTime + 100);\n                this._overlayRef.detachBackdrop();\n            });\n            this._result = result;\n            this.containerInstance.exit();\n        }\n    }\n    /** Gets an observable that is notified when the bottom sheet is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default bottom sheet options. */\nconst MAT_BOTTOM_SHEET_DEFAULT_OPTIONS = new InjectionToken('mat-bottom-sheet-default-options');\n/**\n * Service to trigger Material Design bottom sheets.\n */\nclass MatBottomSheet {\n    constructor(_overlay, _injector, _parentBottomSheet, _defaultOptions) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._parentBottomSheet = _parentBottomSheet;\n        this._defaultOptions = _defaultOptions;\n        this._bottomSheetRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened bottom sheet. */\n    get _openedBottomSheetRef() {\n        const parent = this._parentBottomSheet;\n        return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n    }\n    set _openedBottomSheetRef(value) {\n        if (this._parentBottomSheet) {\n            this._parentBottomSheet._openedBottomSheetRef = value;\n        }\n        else {\n            this._bottomSheetRefAtThisLevel = value;\n        }\n    }\n    open(componentOrTemplateRef, config) {\n        const _config = _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n        const overlayRef = this._createOverlay(_config);\n        const container = this._attachContainer(overlayRef, _config);\n        const ref = new MatBottomSheetRef(container, overlayRef);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n                $implicit: _config.data,\n                bottomSheetRef: ref\n            }));\n        }\n        else {\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, this._createInjector(_config, ref));\n            const contentRef = container.attachComponentPortal(portal);\n            ref.instance = contentRef.instance;\n        }\n        // When the bottom sheet is dismissed, clear the reference to it.\n        ref.afterDismissed().subscribe(() => {\n            // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n            if (this._openedBottomSheetRef == ref) {\n                this._openedBottomSheetRef = null;\n            }\n        });\n        if (this._openedBottomSheetRef) {\n            // If a bottom sheet is already in view, dismiss it and enter the\n            // new bottom sheet after exit animation is complete.\n            this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n            this._openedBottomSheetRef.dismiss();\n        }\n        else {\n            // If no bottom sheet is in view, enter the new bottom sheet.\n            ref.containerInstance.enter();\n        }\n        this._openedBottomSheetRef = ref;\n        return ref;\n    }\n    /**\n     * Dismisses the currently-visible bottom sheet.\n     * @param result Data to pass to the bottom sheet instance.\n     */\n    dismiss(result) {\n        if (this._openedBottomSheetRef) {\n            this._openedBottomSheetRef.dismiss(result);\n        }\n    }\n    ngOnDestroy() {\n        if (this._bottomSheetRefAtThisLevel) {\n            this._bottomSheetRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the bottom sheet container component to the overlay.\n     */\n    _attachContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatBottomSheetConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified bottom sheet config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig({\n            direction: config.direction,\n            hasBackdrop: config.hasBackdrop,\n            disposeOnNavigation: config.closeOnNavigation,\n            maxWidth: '100%',\n            scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n            positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n        });\n        if (config.backdropClass) {\n            overlayConfig.backdropClass = config.backdropClass;\n        }\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a bottom sheet component.\n     * @param config Config that was used to create the bottom sheet.\n     * @param bottomSheetRef Reference to the bottom sheet.\n     */\n    _createInjector(config, bottomSheetRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const providers = [\n            { provide: MatBottomSheetRef, useValue: bottomSheetRef },\n            { provide: MAT_BOTTOM_SHEET_DATA, useValue: config.data }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n}\nMatBottomSheet.ɵfac = function MatBottomSheet_Factory(t) { return new (t || MatBottomSheet)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(MatBottomSheet, 12), ɵngcc0.ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8)); };\nMatBottomSheet.ɵprov = ɵɵdefineInjectable({ factory: function MatBottomSheet_Factory() { return new MatBottomSheet(ɵɵinject(Overlay), ɵɵinject(INJECTOR), ɵɵinject(MatBottomSheet, 12), ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8)); }, token: MatBottomSheet, providedIn: MatBottomSheetModule });\nMatBottomSheet.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: MatBottomSheet, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatBottomSheetConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BOTTOM_SHEET_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBottomSheet, [{\n        type: Injectable,\n        args: [{ providedIn: MatBottomSheetModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc0.Injector }, { type: MatBottomSheet, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatBottomSheetConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BOTTOM_SHEET_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults, config) {\n    return Object.assign(Object.assign({}, defaults), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BOTTOM_SHEET_DATA, MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, MatBottomSheet, MatBottomSheetConfig, MatBottomSheetContainer, MatBottomSheetModule, MatBottomSheetRef, matBottomSheetAnimations };\n\n//# sourceMappingURL=bottom-sheet.js.map","import { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { Inject, OnInit, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n\tselector: 'options-sheet',\n\tstyleUrls: ['./options.component.scss'],\n\ttemplateUrl: './options.component.html',\n\tencapsulation: ViewEncapsulation.None\n})\n\nexport class OptionsSheet implements OnInit {\n\n\tconstructor(private sheet: MatBottomSheetRef<OptionsSheet>, @Inject(MAT_BOTTOM_SHEET_DATA) private config: any) { }\n\n\tpublic title: any[] = this.config.title;\n\tpublic options: any[] = this.config.options;\n\n\tpublic submit(option: any) {\n\t\tthis.sheet.dismiss(option);\n\t}\n\n\tngOnInit(): void {\n\t\tthis.options.map(option => {\n\t\t\tif (!option.disabled.includes(this.config.role)) {\n\t\t\t\toption.disabled = false;\n\t\t\t} else {\n\t\t\t\toption.disabled = true;\n\t\t\t}\n\t\t});\n\t}\n\n}\n","<h1>\n    {{ title }}\n</h1>\n\n<mat-list>\n    <mat-list-item type=\"button\" lines=\"full\" *ngFor=\"let option of options\" [attr.color]=\"option.color\" [class.danger]=\"option.danger\" [class.disabled]=\"option.disabled\" matRipple [matRippleDisabled]=\"option.disabled\" (click)=\"!option.disabled && submit(option)\">\n        <mat-icon slot=\"start\" [svgIcon]=\"option.icon\"></mat-icon>\n\n        <mat-label>\n            <h3>\n                {{ option.title }}\n            </h3>\n        </mat-label>\n    </mat-list-item>\n</mat-list>","import { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { OnInit, Component, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n/* --- DIALOGS --- */\nimport { InputOutputDialog } from './input-output/input-output.dialog';\n\n/* --- CLASSES --- */\nimport { Device } from 'src/app/classes/device';\nimport { ObjectId } from 'src/app/classes/id';\nimport { InputOutput } from 'src/app/classes/input-output';\n\n/* --- SERVICES --- */\nimport { ToastService } from 'src/app/services/toast/toast.service';\nimport { OptionsService } from 'src/app/libs/options/options.service';\nimport { DevicesService } from 'src/app/services/devices/devices.service';\nimport { FormErrorService } from 'src/app/services/form-error/form-error.service';\n\n@Component({\n    selector: 'devices-editor-page',\n    styleUrls: ['./editor.page.scss'],\n    templateUrl: './editor.page.html'\n})\n\nexport class DevicesEditorPage implements OnInit, OnDestroy {\n\n    constructor(private sheet: OptionsService, private dialog: MatDialog, private toast: ToastService, private route: ActivatedRoute, private router: Router, private service: DevicesService, private formerror: FormErrorService) { }\n\n    public mode: string = 'add';\n    public form: FormGroup = new FormGroup({\n        ip: new FormControl('0.0.0.0', [Validators.required]),\n        port: new FormControl(0, [Validators.required, Validators.min(0)]),\n        type: new FormControl(null, [Validators.required]),\n        txtime: new FormControl(5, [Validators.required, Validators.min(1)]),\n        pxtime: new FormControl(120, [Validators.required, Validators.min(120)]),\n        barcode: new FormControl(null, [Validators.required]),\n        publish: new FormControl(false, [Validators.required]),\n        timeout: new FormControl(60, [Validators.required]),\n        enabled: new FormControl(false, [Validators.required]),\n        deviceId: new FormControl(null, [Validators.required, Validators.minLength(24), Validators.maxLength(24)]),\n        description: new FormControl(null, [Validators.required])\n    });\n    public table: MatTableDataSource<InputOutput> = new MatTableDataSource<InputOutput>();\n    public errors: any = {\n        ip: '',\n        port: '',\n        type: '',\n        txtime: '',\n        pxtime: '',\n        barcode: '',\n        publish: '',\n        timeout: '',\n        enabled: '',\n        deviceId: '',\n        description: ''\n    };\n    public columns: string[] = ['description'];\n    public loading: boolean = false;\n    public deviceId?: string;\n    private observers: any = {};\n\n    private async get() {\n        this.loading = true;\n\n        const response = await this.service.get({\n            filter: [\n                'io',\n                'ip',\n                'port',\n                'type',\n                'pxtime',\n                'txtime',\n                'barcode',\n                'publish',\n                'timeout',\n                'enabled',\n                'deviceId',\n                'description'\n            ],\n            deviceId: this.deviceId\n        });\n\n        if (response.ok) {\n            const device = new Device(response.result);\n            this.table.data = device.io.map((o: InputOutput) => new InputOutput(o));\n            this.form.controls['ip'].setValue(device.ip);\n            this.form.controls['port'].setValue(device.port);\n            this.form.controls['type'].setValue(device.type);\n            this.form.controls['pxtime'].setValue(device.pxtime);\n            this.form.controls['txtime'].setValue(device.txtime);\n            this.form.controls['barcode'].setValue(device.barcode);\n            this.form.controls['timeout'].setValue(device.timeout);\n            this.form.controls['publish'].setValue(device.publish);\n            this.form.controls['enabled'].setValue(device.enabled);\n            this.form.controls['deviceId'].setValue(device.deviceId);\n            this.form.controls['description'].setValue(device.description);\n        } else {\n            this.toast.error(response.result.message);\n            this.router.navigate(['/devices']);\n        };\n\n        this.loading = false;\n    }\n\n    public async submit() {\n        this.loading = true;\n\n        let mode = this.mode;\n        if (mode == 'copy') {\n            mode = 'add';\n            delete this.deviceId;\n        };\n\n        const response = await (this.service as any)[mode]({\n            io: this.table.data,\n            ip: this.form.value.ip,\n            port: this.form.value.port,\n            type: this.form.value.type,\n            txtime: this.form.value.txtime,\n            pxtime: this.form.value.pxtime,\n            barcode: this.form.value.barcode,\n            timeout: this.form.value.timeout,\n            publish: this.form.value.publish,\n            enabled: this.form.value.enabled,\n            deviceId: this.form.value.deviceId,\n            description: this.form.value.description\n        });\n\n        if (response.ok) {\n            this.router.navigate(['/devices']);\n        } else {\n            this.toast.error(response.result.message);\n        };\n\n        this.loading = false;\n    }\n\n    public async options(io: InputOutput) {\n        this.sheet.show({\n            role: 0,\n            title: io.description,\n            options: [\n                {\n                    icon: 'content_copy',\n                    title: 'Copy',\n                    handler: () => this.editor('copy', io),\n                    disabled: []\n                },\n                {\n                    icon: 'edit',\n                    title: 'Update',\n                    handler: () => this.editor('update', io),\n                    disabled: []\n                },\n                {\n                    icon: 'delete',\n                    title: 'Delete',\n                    danger: true,\n                    handler: () => {\n                        for (let i = 0; i < this.table.data.length; i++) {\n                            if (this.table.data[i].inputId == io.inputId) {\n                                this.table.data.splice(i, 1);\n                                break;\n                            };\n                        };\n                        this.table.data = this.table.data.map(o => new InputOutput(o));\n                    },\n                    disabled: []\n                }\n            ]\n        });\n    }\n\n    public async editor(mode: string, io?: InputOutput) {\n        const dialog = await this.dialog.open(InputOutputDialog, {\n            data: {\n                io: new InputOutput(io),\n                type: this.form.value.type\n            },\n            panelClass: 'fullscreen-dialog'\n        });\n\n        await dialog.afterClosed().subscribe(async result => {\n            if (result) {\n                switch (mode) {\n                    case ('add'):\n                    case ('copy'):\n                        result.inputId = ObjectId();\n                        this.table.data.push(result);\n                        break;\n                    case ('update'):\n                        this.table.data.map((o: any) => {\n                            if (o.inputId == io?.inputId) {\n                                Object.keys(result).map(key => {\n                                    o[key] = result[key];\n                                });\n                            };\n                        });\n                        break;\n                };\n                this.table.data = this.table.data.map((o: InputOutput) => new InputOutput(o));\n            };\n        });\n    }\n\n    ngOnInit(): void {\n        this.observers.form = this.form.valueChanges.subscribe(data => {\n            this.errors = this.formerror.validateForm(this.form, this.errors, true);\n        });\n\n        const params = this.route.snapshot.queryParams;\n        this.mode = params.mode;\n        this.deviceId = params.deviceId;\n        if (this.mode != 'add') {\n            this.get();\n        };\n    }\n\n    ngOnDestroy(): void {\n        this.observers.form?.unsubscribe();\n    }\n\n}\n","<mat-toolbar>\n    <mat-back-button></mat-back-button>\n\n    <mat-label class=\"spacer\">\n        Devices Editor\n    </mat-label>\n</mat-toolbar>\n\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\"></mat-progress-bar>\n\n<mat-content>\n    <form [formGroup]=\"form\" (ngSubmit)=\"!loading && !form.invalid && submit()\">\n        <section>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Type\n                </mat-label>\n    \n                <mat-select placeholder=\"type\" formControlName=\"type\" required>\n                    <mat-option value=\"modbus\">\n                        Modbus\n                    </mat-option>\n                    <mat-option value=\"external\">\n                        External\n                    </mat-option>\n                    <mat-option value=\"programmable-logic-controller\">\n                        Programmable Logic Controller\n                    </mat-option>\n                </mat-select>\n    \n                <mat-error *ngIf=\"errors.type\">\n                    {{ errors.type }}\n                </mat-error>\n            </mat-form-field>\n    \n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Device ID\n                </mat-label>\n    \n                <input matInput type=\"text\" minlength=\"24\" maxlength=\"24\" placeholder=\"device id\" formControlName=\"deviceId\" required>\n    \n                <mat-error *ngIf=\"errors.deviceId\">\n                    {{ errors.deviceId }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <section>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    IP\n                </mat-label>\n\n                <input matInput type=\"url\" placeholder=\"ip\" formControlName=\"ip\" required>\n\n                <mat-error *ngIf=\"errors.ip\">\n                    {{ errors.ip }}\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Port\n                </mat-label>\n\n                <input matInput type=\"number\" min=\"0\" placeholder=\"port\" formControlName=\"port\" required>\n\n                <mat-error *ngIf=\"errors.port\">\n                    {{ errors.port }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <section>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Publish\n                </mat-label>\n    \n                <mat-select placeholder=\"publish\" formControlName=\"publish\" required>\n                    <mat-option [value]=\"true\">\n                        Enabled\n                    </mat-option>\n                    <mat-option [value]=\"false\">\n                        Disabled\n                    </mat-option>\n                </mat-select>\n    \n                <mat-error *ngIf=\"errors.publish\">\n                    {{ errors.publish }}\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Publish Interval\n                </mat-label>\n\n                <input matInput min=\"120\" type=\"number\" placeholder=\"publish interval\" formControlName=\"pxtime\" required>\n\n                <span matSuffix>\n                    second{{ form.value.pxtime > 1 ? 's' : '' }}\n                </span>\n\n                <mat-error *ngIf=\"errors.pxtime\">\n                    {{ errors.pxtime }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <section>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Enabled\n                </mat-label>\n    \n                <mat-select placeholder=\"enabled\" formControlName=\"enabled\" required>\n                    <mat-option [value]=\"true\">\n                        Enabled\n                    </mat-option>\n                    <mat-option [value]=\"false\">\n                        Disabled\n                    </mat-option>\n                </mat-select>\n    \n                <mat-error *ngIf=\"errors.enabled\">\n                    {{ errors.enabled }}\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Timeout Interval\n                </mat-label>\n\n                <input matInput min=\"120\" type=\"number\" placeholder=\"Timeout\" formControlName=\"timeout\" required>\n\n                <span matSuffix>\n                    second{{ form.value.timeout > 1 ? 's' : '' }}\n                </span>\n\n                <mat-error *ngIf=\"errors.timeout\">\n                    {{ errors.timeout }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <section>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    TX Time\n                </mat-label>\n\n                <input matInput min=\"1\" type=\"number\" placeholder=\"tx time\" formControlName=\"txtime\" required>\n\n                <mat-error *ngIf=\"errors.txtime\">\n                    {{ errors.txtime }}\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Barcode\n                </mat-label>\n\n                <input matInput type=\"text\" placeholder=\"barcode\" formControlName=\"barcode\" required>\n\n                <mat-error *ngIf=\"errors.barcode\">\n                    {{ errors.barcode }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <mat-form-field appearance=\"outline\">\n            <mat-label>\n                Description\n            </mat-label>\n\n            <input matInput type=\"text\" placeholder=\"description\" formControlName=\"description\" required>\n\n            <mat-error *ngIf=\"errors.description\">\n                {{ errors.description }}\n            </mat-error>\n        </mat-form-field>\n\n        <button #button type=\"submit\" style=\"display: none;\"></button>\n    </form>\n\n    <table mat-table [dataSource]=\"table\" matSort>\n        <ng-container matColumnDef=\"description\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>\n                Description\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                {{ element.description }}\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"columns; sticky: true;\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: columns;\" (click)=\"options(row)\"></tr>\n    </table>\n\n    <button class=\"add\" mat-icon-button color=\"primary\" (click)=\"editor('add')\">\n        <mat-icon svgIcon=\"add\"></mat-icon>\n    </button>\n</mat-content>\n\n<mat-footer>\n    <button type=\"button\" color=\"primary\" mat-flat-button (click)=\"button.click()\">\n        submit\n    </button>\n</mat-footer>","/* --- PAGES --- */\nimport { ViewerPage } from './viewer/viewer.page';\nimport { DevicesPage } from './devices.page';\nimport { DevicesEditorPage } from './editor/editor.page';\n\n/* --- DIALOGS --- */\nimport { InputOutputDialog } from './editor/input-output/input-output.dialog';\n\n/* --- MODULES --- */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OptionsModule } from 'src/app/libs/options/options.module';\nimport { ConfirmModule } from 'src/app/libs/confirm/confirm.module';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFooterModule } from 'src/app/libs/mat-footer/mat-footer.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatContentModule } from 'src/app/libs/mat-content/mat-content.module';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatMenuButtonModule } from 'src/app/libs/mat-menu-button/mat-menu-button.module';\nimport { MatBackButtonModule } from 'src/app/libs/mat-back-button/mat-back-button.module';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: DevicesPage\n    },\n    {\n        path: 'editor',\n        component: DevicesEditorPage\n    },\n    {\n        path: 'viewer',\n        component: ViewerPage\n    }\n];\n\n@NgModule({\n    imports: [\n        FormsModule,\n        CommonModule,\n        MatListModule,\n        OptionsModule,\n        MatSortModule,\n        MatIconModule,\n        ConfirmModule,\n        MatTableModule,\n        MatInputModule,\n        MatDialogModule,\n        MatFooterModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatTooltipModule,\n        MatToolbarModule,\n        MatContentModule,\n        MatGridListModule,\n        MatFormFieldModule,\n        MatBackButtonModule,\n        MatMenuButtonModule,\n        ReactiveFormsModule,\n        MatProgressBarModule,\n        RouterModule.forChild(routes)\n    ],\n    declarations: [\n        ViewerPage,\n        DevicesPage,\n        InputOutputDialog,\n        DevicesEditorPage,\n    ]\n})\n\nexport class DevicesPageModule { }\n","/* --- MODULES ---*/\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n/* --- SERVICES ---*/\nimport { ConfirmService } from './confirm.service';\n\n/* --- COMPONENTS ---*/\nimport { ConfirmDialog } from './confirm.dialog';\n\n@NgModule({\n\timports: [\n\t\tFormsModule,\n\t\tCommonModule,\n\t\tMatIconModule,\n\t\tMatSelectModule,\n\t\tMatDialogModule,\n\t\tMatButtonModule,\n\t\tMatToolbarModule,\n\t\tMatFormFieldModule,\n\t\tReactiveFormsModule\n\t],\n\tproviders: [\n\t\tConfirmService\n\t],\n\tdeclarations: [\n\t\tConfirmDialog\n\t]\n})\n\nexport class ConfirmModule { }\n","import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Inject, OnInit, Component, OnDestroy } from '@angular/core';\n\n/* --- SERVICES --- */\nimport { FormErrorService } from 'src/app/services/form-error/form-error.service';\n\n@Component({\n    selector: 'input-output-dialog',\n    styleUrls: ['./input-output.dialog.scss'],\n    templateUrl: './input-output.dialog.html'\n})\n\nexport class InputOutputDialog implements OnInit, OnDestroy {\n\n    constructor(private dialog: MatDialogRef<InputOutputDialog>, @Inject(MAT_DIALOG_DATA) private config: any, private formerror: FormErrorService) { }\n\n    public keys: string[] = [\n        'AI1',\n        'AI2',\n        'AI3',\n        'AI4',\n        'TEXT1',\n        'TEXT2',\n        'TEXT3',\n        'TEXT4',\n        'AIExt1',\n        'AIExt2',\n        'AIExt3',\n        'AIExt4',\n        'AIExt5',\n        'AIExt6',\n        'AIExt7',\n        'AIExt8',\n        'BATT',\n        'CI1',\n        'CI2',\n        'CI3',\n        'CI4',\n        'CI5',\n        'CI6',\n        'CI7',\n        'CI8',\n        'LAT',\n        'LNG',\n        'SIG',\n        'txFlag',\n        'digitalsIn'\n    ];\n    public type: string = this.config.type;\n    public form: FormGroup = new FormGroup({\n        bit: new FormControl(this.config.io.bit),\n        key: new FormControl(this.config.io.key),\n        tagId: new FormControl(this.config.io.tagId),\n        inputId: new FormControl(this.config.io.inputId, [Validators.required]),\n        register: new FormControl(this.config.io.register),\n        moduleId: new FormControl(this.config.io.moduleId),\n        readable: new FormControl(this.config.io.readable),\n        interface: new FormControl(this.config.io.interface),\n        writeable: new FormControl(this.config.io.writeable),\n        description: new FormControl(this.config.io.description, [Validators.required])\n    });\n    public errors: any = {\n        bit: '',\n        key: '',\n        tagId: '',\n        inputId: '',\n        register: '',\n        moduleId: '',\n        readable: '',\n        interface: '',\n        writeable: '',\n        description: ''\n    };\n    public registers: string[] = [\n        'hr2',\n        'hr3',\n        'hr4',\n        'hr5',\n        'hr6',\n        'hr7',\n        'hr8',\n        'hr9'\n    ];\n    public interfaces: string[] = [\n        'BOOL',\n        'SINT',\n        'INT',\n        'DINT',\n        'LINT',\n        'USINT',\n        'UINT',\n        'UDINT',\n        'REAL',\n        'LREAL',\n        'STIME',\n        'DATE',\n        'TIME_AND_DAY',\n        'DATE_AND_STRING',\n        'STRING',\n        'WORD',\n        'DWORD',\n        'BIT_STRING',\n        'LWORD',\n        'STRING2',\n        'FTIME',\n        'LTIME',\n        'ITIME',\n        'STRINGN',\n        'SHORT_STRING',\n        'TIME',\n        'EPATH',\n        'ENGUNIT',\n        'STRINGI',\n        'STRUCT'\n    ];\n    private observers: any = {};\n\n    public close() {\n        this.dialog.close(null);\n    }\n\n    public submit() {\n        this.dialog.close(this.form.value);\n    }\n\n    ngOnInit(): void {\n        this.keys = this.keys.sort();\n\n        switch (this.type) {\n            case ('modbus'):\n                this.form.controls.register.setValidators([Validators.required]);\n                this.form.controls.register.updateValueAndValidity();\n                break;\n            case ('external'):\n                this.form.controls.key.setValidators([Validators.required]);\n                this.form.controls.key.updateValueAndValidity();\n                this.form.controls.moduleId.setValidators([Validators.required]);\n                this.form.controls.moduleId.updateValueAndValidity();\n                break;\n            case ('programmable-logic-controller'):\n                this.form.controls.tagId.setValidators([Validators.required]);\n                this.form.controls.tagId.updateValueAndValidity();\n                this.form.controls.readable.setValidators([Validators.required]);\n                this.form.controls.readable.updateValueAndValidity();\n                this.form.controls.interface.setValidators([Validators.required]);\n                this.form.controls.interface.updateValueAndValidity();\n                this.form.controls.writeable.setValidators([Validators.required]);\n                this.form.controls.writeable.updateValueAndValidity();\n                break;\n        };\n\n        this.observers.key = this.form.controls.key.valueChanges.subscribe(key => {\n            if (key == 'digitalsIn') {\n                this.form.controls.bit.setValidators([Validators.required, Validators.min(0)]);\n            } else {\n                this.form.controls.bit.setValidators(null);\n            };\n            this.form.controls.bit.updateValueAndValidity();\n        });\n\n        this.observers.form = this.form.valueChanges.subscribe(data => {\n            this.errors = this.formerror.validateForm(this.form, this.errors, true);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.observers.key?.unsubscribe();\n        this.observers.form?.unsubscribe();\n    }\n\n}\n","<mat-toolbar>\n    <mat-label class=\"spacer\">\n        Input Output Editor\n    </mat-label>\n\n    <button mat-icon-button (click)=\"close()\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</mat-toolbar>\n\n<mat-content>\n    <form [formGroup]=\"form\" (ngSubmit)=\"!form.invalid && submit()\">\n        <mat-form-field appearance=\"outline\" *ngIf=\"type == 'modbus'\">\n            <mat-label>\n                Register\n            </mat-label>\n\n            <input matInput type=\"number\" min=\"0\" placeholder=\"register\" formControlName=\"register\" [required]=\"type == 'modbus'\">\n\n            <mat-error *ngIf=\"errors.register\">\n                {{ errors.register }}\n            </mat-error>\n        </mat-form-field>\n        \n        <section>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Module ID\n                </mat-label>\n    \n                <input matInput type=\"number\" placeholder=\"moduleId\" formControlName=\"moduleId\" [required]=\"type == 'external'\">\n    \n                <mat-error *ngIf=\"errors.moduleId\">\n                    {{ errors.moduleId }}\n                </mat-error>\n            </mat-form-field>\n    \n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Key\n                </mat-label>\n    \n                <mat-select placeholder=\"key\" formControlName=\"key\" [required]=\"type == 'external'\">\n                    <mat-option *ngFor=\"let key of keys\" [value]=\"key\">\n                        {{ key }}\n                    </mat-option>\n                </mat-select>\n    \n                <mat-error *ngIf=\"errors.key\">\n                    {{ errors.key }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <section *ngIf=\"form.value.key == 'digitalsIn'\">\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Bit\n                </mat-label>\n    \n                <input matInput type=\"number\" min=\"0\" placeholder=\"bit\" formControlName=\"bit\" [required]=\"type == 'external' || form.value.key == 'digitalsIn'\">\n    \n                <mat-error *ngIf=\"errors.bit\">\n                    {{ errors.bit }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <section *ngIf=\"type == 'programmable-logic-controller'\">\n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Readable\n                </mat-label>\n    \n                <mat-select placeholder=\"readable\" formControlName=\"readable\" [required]=\"type == 'programmable-logic-controller'\">\n                    <mat-option [value]=\"true\">\n                        Enabled\n                    </mat-option>\n                    <mat-option [value]=\"false\">\n                        Disabled\n                    </mat-option>\n                </mat-select>\n    \n                <mat-error *ngIf=\"errors.readable\">\n                    {{ errors.readable }}\n                </mat-error>\n            </mat-form-field>\n    \n            <mat-form-field appearance=\"outline\">\n                <mat-label>\n                    Writeable\n                </mat-label>\n    \n                <mat-select placeholder=\"writeable\" formControlName=\"writeable\" [required]=\"type == 'programmable-logic-controller'\">\n                    <mat-option [value]=\"true\">\n                        Enabled\n                    </mat-option>\n                    <mat-option [value]=\"false\">\n                        Disabled\n                    </mat-option>\n                </mat-select>\n    \n                <mat-error *ngIf=\"errors.writeable\">\n                    {{ errors.writeable }}\n                </mat-error>\n            </mat-form-field>\n        </section>\n\n        <mat-form-field appearance=\"outline\" *ngIf=\"type == 'programmable-logic-controller'\">\n            <mat-label>\n                Tag ID\n            </mat-label>\n\n            <input matInput type=\"text\" placeholder=\"tagId\" formControlName=\"tagId\" [required]=\"type == 'programmable-logic-controller'\">\n\n            <mat-error *ngIf=\"errors.tagId\">\n                {{ errors.tagId }}\n            </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" *ngIf=\"type == 'programmable-logic-controller'\">\n            <mat-label>\n                Data Type\n            </mat-label>\n\n            <mat-select placeholder=\"data type\" formControlName=\"interface\" [required]=\"type == 'programmable-logic-controller'\">\n                <mat-option *ngFor=\"let o of interfaces\" [value]=\"o\">\n                    {{ o }}\n                </mat-option>\n            </mat-select>\n\n            <mat-error *ngIf=\"errors.interface\">\n                {{ errors.interface }}\n            </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\">\n            <mat-label>\n                Description\n            </mat-label>\n\n            <input matInput type=\"text\" placeholder=\"description\" formControlName=\"description\" required>\n\n            <mat-error *ngIf=\"errors.description\">\n                {{ errors.description }}\n            </mat-error>\n        </mat-form-field>\n\n        <button #button type=\"submit\" style=\"display: none;\"></button>\n    </form>\n</mat-content>\n\n<mat-footer>\n    <button type=\"button\" color=\"primary\" mat-flat-button (click)=\"button.click()\">\n        submit\n    </button>\n</mat-footer>","import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n\tselector: 'mat-footer',\n\tstyleUrls: ['./mat-footer.scss'],\n\ttemplateUrl: './mat-footer.html',\n\tencapsulation: ViewEncapsulation.None\n})\n\nexport class MatFooter {\n\n\tconstructor() { }\n\n}\n","<ng-content></ng-content>","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\n\n/* --- CLASSES --- */\nimport { Device } from 'src/app/classes/device';\nimport { Socket } from 'src/app/classes/socket';\nimport { InputOutput } from 'src/app/classes/input-output';\n\n/* --- SERVICES --- */\nimport { ToastService } from 'src/app/services/toast/toast.service';\nimport { ConfigService } from 'src/app/services/config/config.service';\nimport { DevicesService } from 'src/app/services/devices/devices.service';\n\n/* --- ENVIRONMENT --- */\nimport { environment } from 'src/environments/environment';\n\n@Component({\n    selector: 'devices-viewer-page',\n    styleUrls: ['./viewer.page.scss'],\n    templateUrl: './viewer.page.html'\n})\n\nexport class ViewerPage implements OnInit, OnDestroy {\n\n    constructor(private service: DevicesService, private config: ConfigService, private route: ActivatedRoute, private router: Router, private toast: ToastService) { }\n\n    public device: Device = new Device();\n    public loading: boolean = false;\n    public deviceId?: string;\n    private observers: any = {};\n\n    private async get() {\n        this.loading = true;\n\n        const response = await this.service.get({\n            filter: [\n                'io',\n                'ip',\n                'port',\n                'type',\n                'pxtime',\n                'txtime',\n                'barcode',\n                'publish',\n                'enabled',\n                'deviceId',\n                'isConnected',\n                'description'\n            ],\n            deviceId: this.deviceId\n        });\n        if (response.ok) {\n            this.device = new Device(response.result);\n        } else {\n            this.toast.error(response.result.message);\n            this.router.navigate(['/devices']);\n        }\n        this.loading = false;\n    }\n\n    ngOnInit(): void {\n        (async () => {\n            const params = this.route.snapshot.queryParams;\n            this.deviceId = params.deviceId;\n\n            await this.get();\n\n            const socket = new Socket(environment.socket, 'devices');\n\n            this.observers.data = socket.data.subscribe((event: any) => {\n                switch (event.process) {\n                    case ('data'):\n                        if (this.deviceId == event.result.deviceId) {\n                            this.device.lastConnection = new Date();\n                            this.device.isConnected = true;\n                            this.device.io.map((io: InputOutput) => {\n                                event.result.data.map((data: { value: number; inputId: string }) => {\n                                    if (io.inputId == data.inputId) {\n                                        io.value = data.value;\n                                    };\n                                });\n                            });\n                        };\n                        break;\n                    case ('timeout'):\n                        if (this.deviceId == event.result.deviceId) {\n                            if (event.result.timeout) {\n                                delete this.device.lastConnection;\n                                this.device.isConnected = false;\n                            } else {\n                                this.device.isConnected = true;\n                            };\n                        };\n                        break;\n                };\n            });\n\n            this.observers.status = socket.status.subscribe((status: any) => {\n                if (status == 'disconnected') {\n                    setTimeout(() => socket.reconnect(), 5000);\n                };\n            });\n        })();\n    }\n\n    ngOnDestroy(): void {\n        this.observers.data?.unsubscribe();\n        this.observers.status?.unsubscribe();\n    }\n}\n","<mat-toolbar>\n    <mat-back-button></mat-back-button>\n\n    <mat-label class=\"spacer\">\n        {{ device.description }}\n    </mat-label>\n\n    <span class=\"last-connection\">\n        {{ device.lastConnection ? (device.lastConnection | date : 'yyyy/MM/dd HH:mm:ss') : 'not connected!' }}\n    </span>\n\n    <mat-icon [class.isConnected]=\"device.isConnected\">\n        wifi\n    </mat-icon>\n</mat-toolbar>\n\n<mat-content>\n    <div class=\"inputs-container\">\n        <div class=\"inputs\" *ngFor=\"let input of device.io\">\n            <div class=\"input-description\">\n                {{ input.description }}     \n            </div>\n    \n            <div class=\"input-value\">\n                {{ input.value }}\n            </div>\n        </div>\n    </div>\n</mat-content>","import { ConfirmConfig } from './confirm.service';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Inject, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n\tselector: 'confirm-dialog',\n\tstyleUrls: ['./confirm.dialog.scss'],\n\ttemplateUrl: './confirm.dialog.html',\n\tencapsulation: ViewEncapsulation.None\n})\n\nexport class ConfirmDialog {\n\n\tconstructor(private dialog: MatDialogRef<ConfirmDialog>, @Inject(MAT_DIALOG_DATA) private config: ConfirmConfig) { }\n\n\tpublic message: string = this.config.message;\n\n\tpublic reject() {\n\t\tthis.dialog.close(false);\n\t}\n\n\tpublic confirm() {\n\t\tthis.dialog.close(true);\n\t}\n\n}\n","<mat-toolbar color=\"primary\">\n    {{ message }}\n</mat-toolbar>\n\n<button type=\"button\" mat-flat-button color=\"primary\" (click)=\"confirm()\">\n    Yes, I am sure!\n</button>\n\n<button type=\"button\" mat-flat-button color=\"warn\" (click)=\"reject()\">\n    No, Cancel!\n</button>","/* --- MODULES --- */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\n\n/* --- SERVICES --- */\nimport { OptionsService } from './options.service';\n\n/* --- COMPONENTS --- */\nimport { OptionsSheet } from './options.component';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tMatIconModule,\n\t\tMatListModule,\n\t\tMatRippleModule,\n\t\tMatFormFieldModule,\n\t\tMatBottomSheetModule\n\t],\n\tproviders: [\n\t\tOptionsService\n\t],\n\tdeclarations: [\n\t\tOptionsSheet\n\t]\n})\n\nexport class OptionsModule { }\n","import { MatDialog } from '@angular/material/dialog';\nimport { Injectable } from '@angular/core';\nimport { ConfirmDialog } from './confirm.dialog';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\n\nexport class ConfirmService {\n\n\tconstructor(private dialog: MatDialog) { }\n\n\tpublic async show(config: ConfirmConfig) {\n\t\tconst dialog = await this.dialog.open(ConfirmDialog, {\n\t\t\tdata: config,\n\t\t\tpanelClass: 'confirm-dialog'\n\t\t});\n\n\t\tdialog.afterClosed().subscribe(result => {\n\t\t\tif (result && config.handler) {\n\t\t\t\tconfig.handler();\n\t\t\t}\n\t\t});\n\t}\n\n}\n\nexport interface ConfirmConfig {\n\t'message': string;\n\t'handler': Function;\n}\n","/* --- MODULES --- */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/* --- COMPONENTS --- */\nimport { MatFooter } from './mat-footer';\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\texports: [\n\t\tMatFooter\n\t],\n\tdeclarations: [\n\t\tMatFooter\n\t]\n})\n\nexport class MatFooterModule { }\n","import { Injectable } from '@angular/core';\nimport { OptionsSheet } from './options.component';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\n\nexport class OptionsService {\n\n\tconstructor(private sheet: MatBottomSheet) { }\n\n\tpublic show(config: CONFIG) {\n\t\tthis.sheet.open(OptionsSheet, {\n\t\t\tdata: config,\n\t\t\tpanelClass: 'options-sheet'\n\t\t}).afterDismissed().subscribe(result => {\n\t\t\tif (result && result.handler) {\n\t\t\t\tresult.handler();\n\t\t\t}\n\t\t});\n\t}\n\n}\n\ninterface CONFIG {\n\t'role': number;\n\t'title': string;\n\t'options': OPTION[];\n}\n\ninterface OPTION {\n\t'icon'?: string;\n\t'title'?: string;\n\t'danger'?: boolean;\n\t'handler'?: Function;\n\t'disabled': number[];\n}\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\";\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() { return this._rowspan; }\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() { return this._colspan; }\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() { return this._cols; }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() { return this._gutter; }\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() { return this._rowHeight; }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map"],"sourceRoot":"webpack:///"}