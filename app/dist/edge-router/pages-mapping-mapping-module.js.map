{"version":3,"sources":["./src/app/pages/mapping/mapping.page.ts","./src/app/pages/mapping/mapping.page.html","./src/app/classes/map.ts","./src/app/pages/mapping/mapping.module.ts"],"names":[],"mappings":"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","file":"pages-mapping-mapping-module.js","sourcesContent":["import { Map } from 'src/app/classes/map';\nimport { Device } from 'src/app/classes/device';\nimport { ToastService } from 'src/app/services/toast/toast.service';\nimport { MappingService } from 'src/app/services/mapping/mapping.service';\nimport { DevicesService } from 'src/app/services/devices/devices.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { OnInit, Component, OnDestroy } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'mapping-page',\n    styleUrls: ['./mapping.page.scss'],\n    templateUrl: './mapping.page.html'\n})\n\nexport class MappingPage implements OnInit, OnDestroy {\n\n    constructor(private toast: ToastService, public devices: DevicesService, private service: MappingService) { }\n\n    public map: FormGroup = new FormGroup({\n        source: new FormGroup({\n            mask: new FormControl(null, [Validators.required]),\n            inputId: new FormControl(null, [Validators.required]),\n            deviceId: new FormControl(null, [Validators.required])\n        }),\n        destination: new FormGroup({\n            mask: new FormControl(null, [Validators.required]),\n            inputId: new FormControl(null, [Validators.required]),\n            deviceId: new FormControl(null, [Validators.required])\n        })\n    });\n    public table: MatTableDataSource<Map> = new MatTableDataSource<Map>();\n    public inputs: any[] = [];\n    public columns: string[] = ['source.deviceId', 'source.inputId', 'source.mask', 'route', 'destination.deviceId', 'destination.inputId', 'destination.mask', 'options'];\n    public loading: boolean = false;\n\n    public async add() {\n        this.loading = true;\n\n        const response = await this.service.add(this.map.value);\n\n        if (response.ok) {\n            let map = new Map(this.map.value);\n            map.mapId = response.result.mapId;\n            this.table.data.push(map);\n            this.map.reset();\n            this.map.markAsPristine();\n            this.map.markAsUntouched();\n            this.table.data = this.table.data.map(o => new Map(o));\n        } else {\n            this.toast.error(response.result.message);\n        };\n\n        this.loading = false;\n    }\n\n    private async load() {\n        this.loading = true;\n\n        const devices = await this.devices.list({});\n\n        if (devices.ok) {\n            this.devices.data = devices.result.map((o: any) => new Device(o));\n            this.devices.data.map((device: any) => {\n                device.io.map((input: any) => {\n                    input.deviceId = device.deviceId;\n                    this.inputs.push(input);\n                });\n            });\n        } else {\n            this.devices.data = [];\n        };\n\n        this.loading = false;\n    }\n\n    private async list() {\n        this.loading = true;\n\n        const response = await this.service.list({});\n\n        if (response.ok) {\n            this.table.data = response.result.map((o: any) => new Map(o));\n        } else {\n            this.table.data = [];\n        };\n\n        this.loading = false;\n    }\n\n    public async delete(map: Map) {\n        this.loading = true;\n\n        const response = await this.service.delete({\n            mapId: map.mapId\n        });\n\n        if (response.ok) {\n            for (let i = 0; i < this.table.data.length; i++) {\n                if (this.table.data[i]) {\n                    this.table.data.splice(i, 1);\n                    break;\n                };\n            };\n            this.table.data = this.table.data.map(o => new Map(o));\n            this.toast.success('Mapping deleted!');\n        } else {\n            this.toast.error(response.result.message);\n        };\n\n        this.loading = false;\n    }\n\n    public async update(map: Map) {\n        this.loading = true;\n\n        const response = await this.service.update(map);\n\n        if (response.ok) {\n            for (let i = 0; i < this.table.data.length; i++) {\n                if (this.table.data[i].mapId == map.mapId) {\n                    Object.keys(map).map((key: string) => {\n                        (this.table.data[i] as any)[key] = (map as any)[key];\n                    });\n                    break;\n                };\n            };\n            this.table.data = this.table.data.map(o => new Map(o));\n        } else {\n            this.toast.error(response.result.message);\n        };\n\n        this.loading = false;\n    }\n\n    ngOnInit(): void {\n        (async () => {\n            await this.load();\n            await this.list();\n        })();\n    }\n\n    ngOnDestroy(): void { }\n\n}\n","<mat-toolbar>\n    <mat-menu-button></mat-menu-button>\n    \n    <mat-label class=\"spacer\">\n        Mapping\n    </mat-label>\n</mat-toolbar>\n\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\"></mat-progress-bar>\n\n<mat-content>\n    <table mat-table [dataSource]=\"table\">\n        <ng-container matColumnDef=\"source.deviceId\">\n            <th mat-header-cell *matHeaderCellDef>\n                Source Device\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-select placeholder=\"device\" [(ngModel)]=\"element.source.deviceId\" (ngModelChange)=\"update(element)\" required>\n                    <mat-option *ngFor=\"let device of devices.data\" [value]=\"device.deviceId\">\n                        {{ device.description }}\n                    </mat-option>\n                </mat-select>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <mat-form-field formGroupName=\"source\">\n                    <mat-label>\n                        Source Device\n                    </mat-label>\n\n                    <mat-select placeholder=\"device\" formControlName=\"deviceId\" required>\n                        <mat-option *ngFor=\"let device of devices.data\" [value]=\"device.deviceId\">\n                            {{ device.description }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"source.inputId\">\n            <th mat-header-cell *matHeaderCellDef>\n                Source Input\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-select placeholder=\"input\" [(ngModel)]=\"element.source.inputId\" (ngModelChange)=\"update(element)\" required>\n                    <mat-option *ngFor=\"let input of inputs | filterBy : { 'deviceId': element.source.deviceId }\" [value]=\"input.inputId\">\n                        {{ input.description }}\n                    </mat-option>\n                </mat-select>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <mat-form-field formGroupName=\"source\">\n                    <mat-label>\n                        Source Input\n                    </mat-label>\n\n                    <mat-select placeholder=\"input\" formControlName=\"inputId\" required>\n                        <mat-option *ngFor=\"let input of inputs | filterBy : { 'deviceId': map.value.source.deviceId }\" [value]=\"input.inputId\">\n                            {{ input.description }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"source.mask\">\n            <th mat-header-cell *matHeaderCellDef>\n                Source Mask\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <input matInput min=\"-1\" max=\"65535\" type=\"number\" placeholder=\"mask\" [(ngModel)]=\"element.source.mask\" (ngModelChange)=\"update(element)\" required>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <mat-form-field formGroupName=\"source\">\n                    <mat-label>\n                        Source Mask\n                    </mat-label>\n\n                    <input matInput min=\"-1\" max=\"65535\" type=\"number\" placeholder=\"mask\" formControlName=\"mask\" required>\n                </mat-form-field>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"route\">\n            <th mat-header-cell *matHeaderCellDef>\n                <mat-icon svgIcon=\"double_arrow\"></mat-icon>\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon svgIcon=\"double_arrow\"></mat-icon>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <mat-icon svgIcon=\"double_arrow\"></mat-icon>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"destination.deviceId\">\n            <th mat-header-cell *matHeaderCellDef>\n                Destination Device\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-select placeholder=\"device\" [(ngModel)]=\"element.destination.deviceId\" (ngModelChange)=\"update(element)\" required>\n                    <mat-option *ngFor=\"let device of devices.data\" [value]=\"device.deviceId\">\n                        {{ device.description }}\n                    </mat-option>\n                </mat-select>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <mat-form-field formGroupName=\"destination\">\n                    <mat-label>\n                        Destination Device\n                    </mat-label>\n\n                    <mat-select placeholder=\"device\" formControlName=\"deviceId\" required>\n                        <mat-option *ngFor=\"let device of devices.data\" [value]=\"device.deviceId\">\n                            {{ device.description }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"destination.inputId\">\n            <th mat-header-cell *matHeaderCellDef>\n                Destination Input\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-select placeholder=\"input\" [(ngModel)]=\"element.destination.inputId\" (ngModelChange)=\"update(element)\" required>\n                    <mat-option *ngFor=\"let input of inputs | filterBy : { 'deviceId': element.destination.deviceId }\" [value]=\"input.inputId\">\n                        {{ input.description }}\n                    </mat-option>\n                </mat-select>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <mat-form-field formGroupName=\"destination\">\n                    <mat-label>\n                        Destination Input\n                    </mat-label>\n\n                    <mat-select placeholder=\"input\" formControlName=\"inputId\" required>\n                        <mat-option *ngFor=\"let input of inputs | filterBy : { 'deviceId': map.value.destination.deviceId }\" [value]=\"input.inputId\">\n                            {{ input.description }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"destination.mask\">\n            <th mat-header-cell *matHeaderCellDef>\n                Destination Mask\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <input matInput min=\"-1\" max=\"65535\" type=\"number\" placeholder=\"mask\" [(ngModel)]=\"element.destination.mask\" (ngModelChange)=\"update(element)\" required>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <mat-form-field formGroupName=\"destination\">\n                    <mat-label>\n                        Destination Mask\n                    </mat-label>\n\n                    <input matInput min=\"-1\" max=\"65535\" type=\"number\" placeholder=\"mask\" formControlName=\"mask\" required>\n                </mat-form-field>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"options\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <button mat-icon-button color=\"warn\" (click)=\"!loading && delete(element)\">\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\n                </button>\n            </td>\n            <td mat-footer-cell *matFooterCellDef [formGroup]=\"map\">\n                <button type=\"button\" mat-icon-button color=\"primary\" (click)=\"!loading && !map.invalid && add()\">\n                    <mat-icon svgIcon=\"add\"></mat-icon>\n                </button>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"columns; sticky: true;\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: columns;\"></tr>\n        <tr mat-footer-row *matFooterRowDef=\"columns; sticky: true;\"></tr>\n    </table>\n</mat-content>","import { ObjectId } from './id';\n\nexport class Map {\n\n    public mapId: string = ObjectId();\n    public source: SOURCE_DESTINATION = {\n        mask: 0,\n        inputId: '',\n        deviceId: ''\n    };\n    public destination: SOURCE_DESTINATION = {\n        mask: 0,\n        inputId: '',\n        deviceId: ''\n    };\n\n    constructor(args?: MAP) {\n        if (typeof (args) != 'undefined' && args != null) {\n            if (typeof (args.mapId) != 'undefined' && args.mapId != null) {\n                this.mapId = args.mapId;\n            };\n            if (typeof (args.source) != 'undefined' && args.source != null) {\n                if (typeof (args.source.mask) != 'undefined' && args.source.mask != null) {\n                    this.source.mask = args.source.mask;\n                }\n                if (typeof (args.source.inputId) != 'undefined' && args.source.inputId != null) {\n                    this.source.inputId = args.source.inputId;\n                }\n                if (typeof (args.source.deviceId) != 'undefined' && args.source.deviceId != null) {\n                    this.source.deviceId = args.source.deviceId;\n                }\n            }\n            if (typeof (args.destination) != 'undefined' && args.destination != null) {\n                if (typeof (args.destination.mask) != 'undefined' && args.destination.mask != null) {\n                    this.destination.mask = args.destination.mask;\n                }\n                if (typeof (args.destination.inputId) != 'undefined' && args.destination.inputId != null) {\n                    this.destination.inputId = args.destination.inputId;\n                }\n                if (typeof (args.destination.deviceId) != 'undefined' && args.destination.deviceId != null) {\n                    this.destination.deviceId = args.destination.deviceId;\n                }\n            }\n        }\n    }\n\n}\n\ninterface MAP {\n    mapId: string;\n    source: SOURCE_DESTINATION;\n    destination: SOURCE_DESTINATION;\n}\n\ninterface SOURCE_DESTINATION {\n    mask: number;\n    inputId: string;\n    deviceId: string;\n}","/* --- PAGES --- */\nimport { MappingPage } from './mapping.page';\n\n/* --- MODULES --- */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { OrderPipeModule } from 'src/app/pipes/order/order.module';\nimport { FilterPipeModule } from 'src/app/pipes/filter/filter.module';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatContentModule } from 'src/app/libs/mat-content/mat-content.module';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatMenuButtonModule } from 'src/app/libs/mat-menu-button/mat-menu-button.module';\nimport { MatBackButtonModule } from 'src/app/libs/mat-back-button/mat-back-button.module';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: MappingPage\n    }\n];\n\n@NgModule({\n    imports: [\n        FormsModule,\n        CommonModule,\n        MatSortModule,\n        MatIconModule,\n        MatTableModule,\n        MatInputModule,\n        MatSelectModule,\n        MatButtonModule,\n        OrderPipeModule,\n        MatTooltipModule,\n        FilterPipeModule,\n        MatToolbarModule,\n        MatContentModule,\n        MatFormFieldModule,\n        MatBackButtonModule,\n        MatMenuButtonModule,\n        ReactiveFormsModule,\n        MatProgressBarModule,\n        RouterModule.forChild(routes)\n    ],\n    declarations: [\n        MappingPage\n    ]\n})\n\nexport class MappingPageModule { }\n"],"sourceRoot":"webpack:///"}